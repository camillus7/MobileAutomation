package com.webautomation.tests.seleniumGrid;

import java.util.List;
import java.util.Set;

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.testng.Assert;
import org.testng.Reporter;
import org.testng.annotations.Test;

import com.webautomation.testdata.factory.MenuFactory;
import com.webautomation.testdata.menu.Menu;
import com.webautomation.testdata.menu.module1AppMenu;

import Base.BaseSteps_SelGrid;

public class WE_Services_Suite extends BaseSteps_SelGrid {

	/**
	 * Constructor
	 */

	String winHandleBefore = null;

	boolean elementIsClickable = false;
	private int passCount;
	private int failCount;
	private int totalTestCaseCount;
	private String testCaseName;
	private String userStoryDescription;
	private String successMsgDesc = "";
	private String failMsgDesc = "";
	private String firstName = "testf" + Math.random();
	private String lastName = "testl" + Math.random();
	private String username = "sqa" + Math.random();

	// **************** Test Scripts Starts Here *****************//

	@Test
	public void WE_HomePageMenuValidation() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.BVN_User);
		Reporter.log("User Story : Home Page Menus Validation", true);
		we_LoginPage.navigateTo_WEHome(menu);
		successMsgDesc = "";
		failMsgDesc = "";
		winHandleBefore = driver.getWindowHandle();

		try {

			try {
				userStoryDescription = "Services";
				vc.getWebDriverUtils().logUserStoryStart(userStoryDescription, "Services");

				vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
				Assert.assertTrue(vc.waitUntilTextIsPresent("My Services"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("CCS Console"));

				successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
			} catch (Throwable e) {
				failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
			}

		} catch (Throwable e) {
			vc.getWebDriverUtils().displayExecutionResults(successMsgDesc, failMsgDesc);
		}
		vc.getWebDriverUtils().displayExecutionResults(successMsgDesc, failMsgDesc);
	}

	@Test
	public void Services_Products_SDWAN_SDWANAccessControl() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.WOL_User);
		userStoryDescription = "SDWANAccessControl";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
					"Services-> Products  -> SD WAN -> SDWANAccessControl");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.sdWAN, "SD WAN");
			vc.getWebDriverUtils().clickLinkText("SD-WAN");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.sdWANAccessControl, "SDWAN AccessControl");

			driver.getWindowHandles();

			Set<String> allHandles = driver.getWindowHandles();
			for (String currentHandle : allHandles) {
				if (!currentHandle.equals(winHandleBefore)) {
					driver.switchTo().window(currentHandle);

					Assert.assertTrue(vc.waitUntilTextIsPresent("Manage User Access"));
					// vc.getWebDriverUtils().clickLinkText("Home");
				}
			}
			driver.close();
			driver.switchTo().window(winHandleBefore);

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_Products_SDWAN_MFASetupGuide() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.WOL_User);
		userStoryDescription = "SDWANAccessControl";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
					"Services-> Products  -> SD WAN -> MFASetupGuide");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.sdWAN, "SD WAN");
			// vc.getWebDriverUtils().clickLinkText("SD-WAN");

			Actions builder = new Actions(driver);
			builder.moveToElement(we_ServicesPage.mfaSetupGuideToolTip).build().perform();

			// driver.switchTo().frame("lpSS_44889596084");
			Reporter.log("*************  MFA Setup Guide Tool Tip Content Validation *************  ");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Setting up MFA is Easy"));
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Watch the following video to see how to PingID enables secure and frictionless Multi-Factor Authentication"));

			// driver.switchTo().defaultContent();
			builder.moveToElement(we_ServicesPage.mfaSetupGuide).build().perform();
			// vc.getWebDriverUtils().clickElement(we_ServicesPage.mfaSetupCloseGuide, "MFA
			// Setup - Close Guide By Clicking X");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.mfaSetupGuide, "MFA Setup Guide");
			driver.getWindowHandles();

			Set<String> allHandles = driver.getWindowHandles();
			for (String currentHandle : allHandles) {
				if (!currentHandle.equals(winHandleBefore)) {
					driver.switchTo().window(currentHandle);

					Assert.assertTrue(vc.waitUntilTextIsPresent(
							"How to: Setup MFA (multi-factor authentication) to access SD-WAN mgmt. tool — Windstream Enterprise Online Communities"));
					Assert.assertTrue(vc.waitUntilTextIsPresent("You can set up your own PingID on your mobile app"));
					Assert.assertTrue(vc.waitUntilTextIsPresent("Sign In"));
					Assert.assertTrue(vc.waitUntilTextIsPresent("Register"));
					Assert.assertTrue(vc.waitUntilTextIsPresent("SD-WAN"));

				}
			}
			driver.close();
			driver.switchTo().window(winHandleBefore);

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_Products_WiFiAdmin_ELNK() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.ELNK_User2);
		userStoryDescription = "WIFI Admin";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription, "Services-> Products  -> WIFI Admin");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.wifiAdmin, "WIFI Admin");
			driver.getWindowHandles();

			Set<String> allHandles = driver.getWindowHandles();
			for (String currentHandle : allHandles) {
				if (!currentHandle.equals(winHandleBefore)) {
					driver.switchTo().window(currentHandle);
					Assert.assertTrue(vc.waitUntilTextIsPresent("Launchpad"));
					Assert.assertTrue(vc.waitUntilTextIsPresent("arista"));
					Assert.assertTrue(vc.waitUntilTextIsPresent("Federated Login"));
					Assert.assertTrue(vc.waitUntilTextIsPresent("Forgot your password"));
				}
			}
			driver.close();
			driver.switchTo().window(winHandleBefore);

			vc.getWebDriverUtils().validatePageTitle("Home");

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_Products_OnlineFax() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.ELNK_User2);
		userStoryDescription = "Services -> Products- >OnlineFax";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription, testMethodName);
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.onlineFax, "Online Fax");

			driver.getWindowHandles();

			Set<String> allHandles = driver.getWindowHandles();
			for (String currentHandle : allHandles) {
				if (!currentHandle.equals(winHandleBefore)) {
					driver.switchTo().window(currentHandle);
					Assert.assertTrue(vc.waitUntilTextIsPresent("Online Faxing"));
					Assert.assertTrue(vc.waitUntilTextIsPresent("https://fax.earthlinkbusiness.com/"));
					vc.getWebDriverUtils().clickElement(we_ServicesPage.loginOnlineFax,
							"Login button to validate error message");
					Assert.assertTrue(vc.waitUntilTextIsPresent("Incorrect fax number or password"));
					Assert.assertTrue(vc.waitUntilTextIsPresent("Please try again"));
					vc.getWebDriverUtils().clickElement(we_ServicesPage.forgotPasswordOnlineFax, "Forgot Password");
					Assert.assertTrue(vc.waitUntilTextIsPresent(
							"Please enter your fax number and click on the \"Send password\" button. Your password will be sent to your account email address."));
					vc.getWebDriverUtils().clickElement(we_ServicesPage.sendPasswordOnlineFax,
							"Send Password  to validate error message");
					Assert.assertTrue(vc.waitUntilTextIsPresent("Error. No fax number provided. Please try again"));
					vc.getWebDriverUtils().clickElement(we_ServicesPage.backToLogInOnlineFax, "Back to log in");
				}
			}
			driver.close();
			driver.switchTo().window(winHandleBefore);

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_Products_HostedContactCenter() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.ELNK_User2);
		userStoryDescription = "Services -> Products- > Hosted Contact Center";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription, testMethodName);
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.hostedContactCenter, "Hosted Contact Center");

			driver.getWindowHandles();

			Set<String> allHandles = driver.getWindowHandles();
			for (String currentHandle : allHandles) {
				if (!currentHandle.equals(winHandleBefore)) {
					driver.switchTo().window(currentHandle);
					Assert.assertTrue(vc.waitUntilTextIsPresent("My Contact Center Administrator - Sign in"));
					Assert.assertTrue(driver.getCurrentUrl().contains("https://cadmin.hcc.elnk.us"));
					Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter your credentials"));
					Assert.assertTrue(vc.waitUntilTextIsPresent("Account ID"));
					Assert.assertTrue(vc.waitUntilTextIsPresent("Username"));
					Assert.assertTrue(vc.waitUntilTextIsPresent("Password"));
					Assert.assertTrue(vc.waitUntilTextIsPresent("Forgot your password?"));
					vc.getWebDriverUtils().clickElement(we_ServicesPage.signInHCS, "Sign In");
					Assert.assertTrue(vc.waitUntilTextIsPresent("This field is required"));
					vc.getWebDriverUtils().selectByVisibleText(we_ServicesPage.languageHCS, "Français", "Language");
					// Fran&#231;ais
					Assert.assertTrue(vc.waitUntilTextIsPresent("Identifiant de compte"));
					Assert.assertTrue(vc.waitUntilTextIsPresent("Nom d'utilisateur"));
					Assert.assertTrue(vc.waitUntilTextIsPresent("Mot de passe"));
					vc.getWebDriverUtils().selectByVisibleText(we_ServicesPage.languageHCS, "English", "Language");
					vc.getWebDriverUtils().clickElement(we_ServicesPage.forgotPasswordHCS, "Forgot Password");
					Assert.assertTrue(vc.waitUntilTextIsPresent("Password Reset Request"));
					Assert.assertTrue(vc.waitUntilTextIsPresent(
							"In order to initiate the process of renewing your password, you need to provide the following information"));
					vc.getWebDriverUtils().clickElement(we_ServicesPage.continueHCS, "Continue");
					Assert.assertTrue(vc.waitUntilTextIsPresent("This field is required"));
					vc.getWebDriverUtils().clickElement(we_ServicesPage.cancelHCS, "Cancel");
					Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter your credentials"));
				}
			}

			driver.close();
			driver.switchTo().window(winHandleBefore);
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.hostedContactCenter,
					"Hosted Contact Center"));

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_Products_TollFree() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.WOL_User);
		userStoryDescription = "Services -> Products- >Toll Free";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription, testMethodName);
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.tollFree, "Toll Free");

			Assert.assertTrue(vc.waitUntilTextIsPresent("Toll Free  - Windstream Enterprise"));

			vc.getWebDriverUtils().clickElement(we_ServicesPage.myPhoneBook, "My Phone Book");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.cancelMyPhoneBook, "Cancel - My Phone Book");

			vc.getWebDriverUtils().clickElement(we_ServicesPage.myPhoneBook, "My Phone Book");
			vc.getWebDriverUtils().enterText(we_ServicesPage.phoneNumberTxt, "1234567890",
					"Invalid Phone Number Validation");
			Assert.assertTrue(
					vc.waitUntilTextIsPresent("Unable to find any Phone Number that match the current query"));
			vc.getWebDriverUtils().enterText(we_ServicesPage.phoneNumberTxt, "", "Clear Phone Number");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.closeXMyPhoneBook, "Close X - My Phone Book");

			// Toll free Re-route
			vc.getWebDriverUtils().clickElement(we_ServicesPage.tollFreeReRoute, "Toll free reroute");
			driver.switchTo().frame("iframereroute");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Select Toll Free Number"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Please select the Toll Free Number you would like to modify"));
			vc.getWebDriverUtils().clickElement(we_ServicesPage.clickHereToSelectMultipleForMassReRoute,
					"Click Here - To select multiple numbers for mass reroute");
			Assert.assertTrue(vc.getWebDriverUtils().getText(we_ServicesPage.tollFreeReportPageTitle, "Page Title")
					.contains("Reroute Multiple Toll free Numbers"));
			Assert.assertTrue(
					vc.waitUntilTextIsPresent("Please select the toll free numbers you would like to reroute"));
			vc.getWebDriverUtils().clickElement(we_ServicesPage.returnToTollfreeListing, "Return To Tollfree Listing");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.routingPlans, "Routing Plans");
			Assert.assertTrue(vc.getWebDriverUtils().getText(we_ServicesPage.tollFreeReportPageTitle, "Page Title")
					.contains("Routing Plans"));
			vc.getWebDriverUtils().clickElement(we_ServicesPage.returnToTollfreeListing, "Return To Tollfree Listing");
			Assert.assertTrue(vc.getWebDriverUtils().getText(we_ServicesPage.tollFreeReportPageTitle, "Page Title")
					.contains("Select Toll Free Number"));

			vc.getWebDriverUtils().clickElement(we_ServicesPage.clickHereToCancelLastMassReRoute,
					"Click Here - To cancel the last mass reroute");
			Assert.assertTrue(vc.getWebDriverUtils().getText(we_ServicesPage.tollFreeReportPageTitle, "Page Title")
					.contains("Reroute To Previous Setting"));
			vc.getWebDriverUtils().clickElement(we_ServicesPage.returnToTollfreeListing, "Return To Tollfree Listing");
			driver.switchTo().defaultContent();

			// Toll free Utilization Report
			vc.getWebDriverUtils().clickElement(we_ServicesPage.tollFreeUtilizationReport,
					"Toll free Utilization Report");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Toll Free Voice Utilization Report  - Windstream Enterprise"));
			vc.waitUntilTextIsPresent("Begin Date");
			vc.waitUntilTextIsPresent("End Date");
			driver.switchTo().frame("tollfreereportiframe");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Master Account"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Report Type"));
			vc.getWebDriverUtils().clickElement(we_ServicesPage.searchBtn, "Search");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Begin Date,  End Date cannot be empty"));
			vc.getWebDriverUtils().enterText(we_ServicesPage.beginDateReportframe, "01/04/2018", "Begin Date");
			we_ServicesPage.beginDateReportframe.sendKeys(Keys.ENTER);
			vc.getWebDriverUtils().enterText(we_ServicesPage.endDateReportframe, "01/04/2019", "End Date");
			we_ServicesPage.beginDateReportframe.sendKeys(Keys.ENTER);
			Assert.assertTrue(vc.waitUntilTextIsPresent("Please select a report type"));
			vc.getWebDriverUtils().selectByVisibleText(we_ServicesPage.reportTypeDropDownReportFrame,
					"Master Account Summary", "Report Type");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.searchBtn, "Search");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Search Criteria"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Export to File"));
			vc.getWebDriverUtils().clickElement(we_ServicesPage.homeReportFrame, "Home");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.clearBtn, "Clear");

			vc.getWebDriverUtils().clickElement(we_ServicesPage.trunkGroupReportFrame, "Trunk Group");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.searchBtn, "Search");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Begin Date,  End Date cannot be empty"));
			vc.getWebDriverUtils().clickElement(we_ServicesPage.tollFreeReportFrame, "Toll Free");
			driver.switchTo().defaultContent();

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_Products_TollFree_RepointTollFreeNumber() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.WOL_User);
		userStoryDescription = "Services -> Products- >Toll Free -> Repoint Toll-Free Number";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription, testMethodName);
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.tollFreeRouting, "Toll Free --> Routing");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.repointTollFreeNumber,
					"Toll Free -> Repoint Toll-Free Number");

			vc.getWebDriverUtils().validatePageTitle("Manage Routing - Windstream Enterprise");

			if (vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.selectAccountReport, "Select Account")) {
				vc.getWebDriverUtils().genericDropDownSelectFirstItem(we_ServicesPage.selectAccountReport,
						"Select Account - Repoint Toll-Free Number");
			}
			vc.getWebDriverUtils().clickHiddenElement(we_ServicesPage.singleTollFreeRadio, "Single Toll Free");
			vc.getWebDriverUtils().genericDropDownSelectFirstItem(we_ServicesPage.pickNumber, "Pick Number");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.next, "Next");
			/*
			 * // Radio Single or Multiple //Pick Number //Retrieve Ring to Number or Ring
			 * to Number with Flex DNIs or Enhanced Routing schema //Next //Retrieve Altered
			 * Toll-Free and New Ring to Number //Validate
			 * "Please review repoints before clicking submit" // Back/Cancel Changes
			 * //Submit //Toll Free number 800.322.2632 was repointed to 847.444.4654.
			 * 
			 * vc.getWebDriverUtils().genericDropDownSelectFirstItem(we_ServicesPage.
			 * selectTollFreeNumbers, "Select Toll Free Number");
			 * 
			 * Assert.assertTrue(vc.waitUntilTextIsPresent(
			 * "Choose one of the options below and complete the change field for the Toll-free number selected above"
			 * )); Reporter.log("Ring to Number:= " +
			 * vc.getWebDriverUtils().getText(we_ServicesPage.ringToNumber,
			 * "Ring to Number"));
			 */

			Assert.assertTrue(vc.waitUntilTextIsPresent("Altered Toll-free"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("NEW RING TO NUMBER"));
			vc.waitUntilTextIsPresent("Please review repoints before clicking submit");

			vc.getWebDriverUtils().clickHiddenElement(we_ServicesPage.backBtnAtSubmit, "Back");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Change Your Toll-Free Routing"));
			vc.getWebDriverUtils().clickElement(we_ServicesPage.next, "Next");

			vc.getWebDriverUtils().clickHiddenElement(we_ServicesPage.submit, "Submit");
			Assert.assertTrue(
					vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.successStatusTollfree, "Success Status"));
			vc.getWebDriverUtils().clickHiddenElement(we_ServicesPage.closeTollFreeRepoint, "Close");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Change Your Toll-Free Routing"));

			Reporter.log("********** Verify the message under Change History **********");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.tollFreeRouting, "Toll Free --> Routing");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.changeHistory, "Change History");

			/*
			 * vc.getWebDriverUtils().
			 * validatePageTitle("Change History - Windstream Enterprise");
			 * vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_ServicesPage.
			 * createdDate, "Created Date", "Custom");
			 * vc.getWebDriverUtils().clickElement(we_ServicesPage.startDateCalendarIcon,
			 * "Start Date - Calendar Icon");
			 * vc.getWebDriverUtils().clickElement(we_ServicesPage.dayActiveDefault,
			 * "- Default Active Date");
			 * vc.getWebDriverUtils().clickElement(we_ServicesPage.applyFilters,
			 * "Apply Filters");
			 * Assert.assertTrue(vc.waitUntilTextIsPresent("Toll Free number "
			 * +selectedNumberFirstRecord+" was ordered."));
			 */

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_Products_TollFree_RepointTollFreeNumber_SinglePoint() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.WOL_User);
		userStoryDescription = "Services -> Products- >Toll Free -> Repoint Toll-Free Number";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription, testMethodName);
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.tollFreeRouting, "Toll Free --> Routing");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.repointTollFreeNumber,
					"Toll Free -> Repoint Toll-Free Number");

			vc.getWebDriverUtils().validatePageTitle("Manage Routing - Windstream Enterprise");

			if (vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.selectAccountReport, "Select Account")) {
				vc.getWebDriverUtils().genericDropDownSelectFirstItem(we_ServicesPage.selectAccountReport,
						"Select Account - Repoint Toll-Free Number");
			}
			vc.getWebDriverUtils().clickHiddenElement(we_ServicesPage.singleTollFreeRadio, "Single Toll Free");
			vc.getWebDriverUtils().genericDropDownSelectFirstItem(we_ServicesPage.pickNumber, "Pick Number");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.next, "Next");

			Assert.assertTrue(vc.waitUntilTextIsPresent("Altered Toll-free"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("NEW RING TO NUMBER"));
			vc.waitUntilTextIsPresent("Please review repoints before clicking submit");

			vc.getWebDriverUtils().clickHiddenElement(we_ServicesPage.backBtnAtSubmit, "Back");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Change Your Toll-Free Routing"));
			vc.getWebDriverUtils().clickElement(we_ServicesPage.next, "Next");

			vc.getWebDriverUtils().clickHiddenElement(we_ServicesPage.submit, "Submit");
			Assert.assertTrue(
					vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.successStatusTollfree, "Success Status"));
			vc.getWebDriverUtils().clickHiddenElement(we_ServicesPage.closeTollFreeRepoint, "Close");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Change Your Toll-Free Routing"));

			Reporter.log("********** Verify the message under Change History **********");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.tollFreeRouting, "Toll Free --> Routing");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.changeHistory, "Change History");

			/*
			 * vc.getWebDriverUtils().
			 * validatePageTitle("Change History - Windstream Enterprise");
			 * vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_ServicesPage.
			 * createdDate, "Created Date", "Custom");
			 * vc.getWebDriverUtils().clickElement(we_ServicesPage.startDateCalendarIcon,
			 * "Start Date - Calendar Icon");
			 * vc.getWebDriverUtils().clickElement(we_ServicesPage.dayActiveDefault,
			 * "- Default Active Date");
			 * vc.getWebDriverUtils().clickElement(we_ServicesPage.applyFilters,
			 * "Apply Filters");
			 * Assert.assertTrue(vc.waitUntilTextIsPresent("Toll Free number "
			 * +selectedNumberFirstRecord+" was ordered."));
			 */

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_Products_TollFree_ManageRouting() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.WOL_User);
		userStoryDescription = "Services -> Products- >Toll Free -> Manage Routing";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription, testMethodName);
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.tollFreeRouting, "Toll Free --> Routing");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.manageRouting, "Manage Routing");

			Assert.assertTrue(vc.waitUntilTextIsPresent("Manage Routing  - Windstream Enterprise"));
			vc.getWebDriverUtils().genericDropDownSelectFirstItem(we_ServicesPage.selectTollFreeNumbers,
					"Select Toll Free Number");

			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Choose one of the options below and complete the change field for the Toll-free number selected above"));
			Reporter.log("Ring to Number:= "
					+ vc.getWebDriverUtils().getText(we_ServicesPage.ringToNumber, "Ring to Number"));
			vc.getWebDriverUtils().clickElement(we_ServicesPage.next, "Next");

			Assert.assertTrue(vc.waitUntilTextIsPresent("The Selected Toll-Free number is"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("My Toll-Free Numbers"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Toll-Free Numbers to Alter"));

			vc.getWebDriverUtils().clickElement(we_ServicesPage.moveAllNumbers, "Move All Numbers");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.revertAllNumbers, "Revert All Numbers");

			vc.getWebDriverUtils().clickElement(we_ServicesPage.myTollFreeNumberFirstRecord,
					"My Toll Free Numbers First Record");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.rightMoveNumber, "Right Move Number -->");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.tollFreeNumberToAlterFirstRecord,
					"Toll Free Number to Alter");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.leftMoveNumber, "Left Move Number <--");

			vc.getWebDriverUtils().clickElement(we_ServicesPage.myTollFreeNumberFirstRecord,
					"My Toll Free Numbers First Record");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.rightMoveNumber, "Right Move Number -->");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.tollFreeNumberToAlterFirstRecord,
					"Toll Free Number to Alter");
			vc.getWebDriverUtils().clickHiddenElement(we_ServicesPage.alterTollFreeRouting, "Alter Toll Free Routing");

			Assert.assertTrue(vc.waitUntilTextIsPresent("Altered Toll-free"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("NEW RING TO NUMBER"));
			vc.getWebDriverUtils().clickHiddenElement(we_ServicesPage.submit, "Submit");
			Assert.assertTrue(
					vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.successStatusTollfree, "Success Status"));
			vc.getWebDriverUtils().clickHiddenElement(we_ServicesPage.tollFreeHome, "Toll free Home");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Select your toll free numbers"));

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_Products_TollFree_RoutingReport() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.WOL_User);
		userStoryDescription = "Services -> Products- >Toll Free -> Routing Report";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription, testMethodName);
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.tollFreeRouting, "Toll Free --> Routing");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.routingReport, "Routing Report");

			Assert.assertTrue(vc.waitUntilTextIsPresent("Routing Report  - Windstream Enterprise"));
			vc.getWebDriverUtils().genericDropDownSelectFirstItem(we_ServicesPage.selectAccountReport,
					"Select Account - Routing Report");

			Assert.assertTrue(vc.waitUntilTextIsPresent("Toll-Free"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("NPA"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Station Number"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("DNIS"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("RTN"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Enhanced Routing"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Profile Type"));

			if (!vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.applyFilters, "Filter - Apply Filters")) {
				vc.getWebDriverUtils().clickElement(we_ServicesPage.filters, "Filter Open");
			}

			String routingReportItems = vc.getWebDriverUtils().getText(we_ServicesPage.routingReportRecordCount,
					"Routing Report - Number of items");
			vc.getWebDriverUtils().enterText(we_ServicesPage.npa, "Invalid NPA", "NPA -  Invalid Entry");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.applyFilters, "Apply Filters");
			Assert.assertTrue(
					vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.routingReportGridZeroRecords,
							"Report Grid - O Record Validation"),
					"Zero records displayed for invalid NPA search criteria");
			Assert.assertTrue(vc.waitUntilTextIsPresent("No items to display"));
			vc.getWebDriverUtils().clickElement(we_ServicesPage.clearFilters, "Clear Filters");
			Assert.assertEquals(vc.getWebDriverUtils().getText(we_ServicesPage.routingReportRecordCount,
					"Routing Report - Number of items"), routingReportItems);

			vc.getWebDriverUtils().enterText(we_ServicesPage.nxx, "Invalid NXX", "NXX -  Invalid Entry");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.applyFilters, "Apply Filters");
			Assert.assertTrue(
					vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.routingReportGridZeroRecords,
							"Report Grid - O Record Validation"),
					"Zero records displayed for invalid NXX search criteria");
			Assert.assertTrue(vc.waitUntilTextIsPresent("No items to display"));
			vc.getWebDriverUtils().clickElement(we_ServicesPage.clearFilters, "Clear Filters");
			Assert.assertEquals(vc.getWebDriverUtils().getText(we_ServicesPage.routingReportRecordCount,
					"Routing Report - Number of items"), routingReportItems);

			vc.getWebDriverUtils().enterText(we_ServicesPage.stationNumber, "Invalid stationNumber",
					"StationNumber -  Invalid Entry");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.applyFilters, "Apply Filters");
			Assert.assertTrue(
					vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.routingReportGridZeroRecords,
							"Report Grid - O Record Validation"),
					"Zero records displayed for invalid Station Number search criteria");
			Assert.assertTrue(vc.waitUntilTextIsPresent("No items to display"));
			vc.getWebDriverUtils().clickElement(we_ServicesPage.clearFilters, "Clear Filters");
			Assert.assertEquals(vc.getWebDriverUtils().getText(we_ServicesPage.routingReportRecordCount,
					"Routing Report - Number of items"), routingReportItems);

			String tollFreeFirstRecord = null;
			String npaFirstRecord = null;
			String nxxFirstRecord = null;
			String stationNumberFirstRecord = null;
			String dnisFirstRecord = null;
			String rtnFirstRecord = null;
			String enhancedRoutingFirstRecord = null;
			String profileTypeFirstRecord = null;

			WebElement table = driver.findElement(By.id("dvRoutingReportGrid"));
			List<WebElement> allRows = table.findElements(By.tagName("tr"));
			Reporter.log("Total Rows displayed: = " + allRows.size(), true);
			int rowCount = 0;
			for (WebElement row : allRows) {
				rowCount = rowCount + 1;
				List<WebElement> cells = row.findElements(By.tagName("td"));
				int colcount = 0;
				if (rowCount > 1) {
					for (WebElement cell : cells) {
						colcount = colcount + 1;
						if (colcount == 1) {
							tollFreeFirstRecord = cell.getText();
						} else if (colcount == 2) {
							npaFirstRecord = cell.getText();
						} else if (colcount == 3) {
							nxxFirstRecord = cell.getText();
						} else if (colcount == 4) {
							stationNumberFirstRecord = cell.getText();
						} else if (colcount == 5) {
							dnisFirstRecord = cell.getText();
						} else if (colcount == 6) {
							rtnFirstRecord = cell.getText();
						} else if (colcount == 7) {
							enhancedRoutingFirstRecord = cell.getText();
						} else if (colcount == 8) {
							profileTypeFirstRecord = cell.getText();
						}
						if (colcount == 8) {
							break;
						}
					}
				}
				if (rowCount > 1) {
					break;
				}
			}

			Reporter.log("TollFree First Record value from Table : = " + tollFreeFirstRecord, true);
			Reporter.log("NPA First Record value from Table : = " + npaFirstRecord, true);
			Reporter.log("NXX First Record value from Table : = " + nxxFirstRecord, true);
			Reporter.log("StationNumber First Record value from Table : = " + stationNumberFirstRecord, true);
			Reporter.log("DNIS First Record value from Table : = " + dnisFirstRecord, true);
			Reporter.log("RTN First Record value from Table : = " + rtnFirstRecord, true);
			Reporter.log("EnhancedRouting First Record value from Table : = " + enhancedRoutingFirstRecord, true);
			Reporter.log("ProfileType First Record value from Table : = " + profileTypeFirstRecord, true);

			vc.getWebDriverUtils().enterText(we_ServicesPage.npa, npaFirstRecord, "NPA");
			vc.getWebDriverUtils().enterText(we_ServicesPage.nxx, nxxFirstRecord, "NXX");
			vc.getWebDriverUtils().enterText(we_ServicesPage.stationNumber, stationNumberFirstRecord, "StationNumber");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.applyFilters, "Apply Filters");
			Assert.assertEquals(vc.getWebDriverUtils().getText(we_ServicesPage.routingReportRecordCount,
					"Routing Report - Number of items"), "1 - 1 of 1 items");

			List<WebElement> allRowsPostFilter = table.findElements(By.tagName("tr"));
			Reporter.log("Total Rows displayed: = " + allRowsPostFilter.size(), true);
			rowCount = 0;
			for (WebElement row : allRowsPostFilter) {
				rowCount = rowCount + 1;
				List<WebElement> cells = row.findElements(By.tagName("td"));
				int colcount = 0;
				for (WebElement cell : cells) {
					colcount = colcount + 1;
					if (colcount == 1) {
						Assert.assertEquals(cell.getText(), tollFreeFirstRecord,
								"Toll Free - Post Filter Search Validation");
					} else if (colcount == 2) {
						Assert.assertEquals(cell.getText(), npaFirstRecord, "NPA - Post Filter Search Validation");
					} else if (colcount == 3) {
						Assert.assertEquals(cell.getText(), nxxFirstRecord, "NXX - Post Filter Search Validation");
					} else if (colcount == 4) {
						Assert.assertEquals(cell.getText(), stationNumberFirstRecord,
								"Station Number - Post Filter Search Validation");
					} else if (colcount == 5) {
						Assert.assertEquals(cell.getText(), dnisFirstRecord, "DNIS - Post Filter Search Validation");
					} else if (colcount == 6) {
						Assert.assertEquals(cell.getText(), rtnFirstRecord, "RTN - Post Filter Search Validation");
					} else if (colcount == 7) {
						Assert.assertEquals(cell.getText(), enhancedRoutingFirstRecord,
								"Enhanced Routing - Post Filter Search Validation");
					} else if (colcount == 8) {
						Assert.assertEquals(cell.getText(), profileTypeFirstRecord,
								"Profile Type - Post Filter Search Validation");
					}
					if (colcount == 8) {
						break;
					}
				}
				break;
			}

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_Products_TollFree_GetANewNumber() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.WOL_User);
		userStoryDescription = "Services -> Products- >Toll Free -> Get A New Number";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription, testMethodName);
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.tollFreeRouting, "Toll Free --> Routing");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.getANewNumber, "Get A New Number");

			vc.getWebDriverUtils().validatePageTitle("Search & Activate New Number - Windstream Enterprise");

			if (vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.selectAccountReport, "Select Account")) {
				vc.getWebDriverUtils().genericDropDownSelectFirstItem(we_ServicesPage.selectAccountReport,
						"Select Account - Get A New Number");
			}

			Reporter.log("********** Step 1  -  Search for Available Toll-Free Numbers **********");
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Enter any combination of letters, numbers, and wildcards (represented by the * symbol) to search for a specific Toll-Free number"));

			// Assert.assertTrue(vc.waitUntilTextIsPresent("Confirm </span>& Submit
			// Order"));

			vc.getWebDriverUtils().genericDropDownSelectFirstItem(we_ServicesPage.selectTelephoneNo,
					"Select Telephone No");
			vc.getWebDriverUtils().clickHiddenElement(we_ServicesPage.checkThisBoxIfNumbersShouldBeConsecutive,
					"Check -Check this box if numbers should be consecutive");
			vc.getWebDriverUtils().clickHiddenElement(we_ServicesPage.checkThisBoxIfNumbersShouldBeConsecutive,
					"UnCheck - Check this box if numbers should be consecutive");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.nextStep1, "Next");

			Reporter.log("********** Step 2  - Select Toll-Free Number(s) to activate **********");
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Reminder: There is a chance that your Toll-Free number may be reserved by another party before your order is completed"));
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"There is a chance that your Toll-Free number may be reserved by another party before your order is completed"));

			vc.getWebDriverUtils().clickElement(we_ServicesPage.moveAllNumbers, "Move All Numbers");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.revertAllNumbers, "Revert All Numbers");

			vc.getWebDriverUtils().clickElement(we_ServicesPage.availableTollFreeNumbersFirstRecord,
					"Available Toll Free Numbers First Record");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.rightMoveNumber, "Right Move Number -->");

			vc.getWebDriverUtils().clickElement(we_ServicesPage.selectedTollFreeNumbersFirstRecord,
					"Selected Toll Free Numbesr First Record");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.leftMoveNumber, "Left Move Number <--");
			String selectedNumberFirstRecord = vc.getWebDriverUtils().getText(
					we_ServicesPage.availableTollFreeNumbersFirstRecord,
					"Selected - Available Toll Free Numbers First Record");
			Reporter.log("Selected Number := " + selectedNumberFirstRecord, true);
			vc.getWebDriverUtils().clickElement(we_ServicesPage.availableTollFreeNumbersFirstRecord,
					"Available Toll Free Numbers First Record");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.rightMoveNumber, "Right Move Number -->");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.nextStep2, "Next");

			Reporter.log("********** Step 3  - Configure Routing **********");
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Please select an existing number from the drop down below if your new number should match its configuration"));
			vc.getWebDriverUtils().genericDropDownSelectFirstItem(we_ServicesPage.tollFreeNumberToMatchConfiguration,
					"Toll Free Number to Match Configuration");
			vc.getWebDriverUtils().clickHiddenElement(we_ServicesPage.matchConfigCheckbox, "Match Config Checkbox");
			// vc.getWebDriverUtils().enterText(we_ServicesPage.dnisText, "8881231234",
			// "DNIS");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.nextStep3, "Next");

			Reporter.log("********** Step 4  - Order Detail **********");
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"If the configuration of your new number matches the configuration of an existing number,Enhanched Routing or pre-Determined Profits will be applied."));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Contact information for this order"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Configure Directory Listing / Blocking"));

			vc.getWebDriverUtils().clickHiddenElement(we_ServicesPage.directoryList, "Check - DirectoryList");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.nextStep4, "Next");
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Contracted rates for directory listing and Toll-Free usage apply. For more information, please contact customer care at 1.800.600.5050"));
			vc.getWebDriverUtils().clickElement(we_ServicesPage.noRatesDirectoryList, "No - Rates Directory List");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.nextStep4, "Next");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.yesRatesDirectoryList, "Yes - Rates Directory List");

			Reporter.log("********** Step 5  - Confirm & Submit Order **********");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Match Config"));
			vc.getWebDriverUtils().clickElement(we_ServicesPage.submitOrder, "Submit Order");

			Assert.assertTrue(vc.waitUntilTextIsPresent("Your order has been submitted"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("The confirmation number is"));

			vc.waitUntilTextIsPresent(" A confirmation E-mail will be sent to the address you provided");
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Please allow 5 business days to process your new Toll-Free number(s). Please contact customer care at <b>800.600.5050</b> if they are not active after 5 days"));

			Reporter.log(vc.getWebDriverUtils().getText(we_ServicesPage.confirmationNumber, "Confirmation Number"),
					true);
			vc.getWebDriverUtils().clickElement(we_ServicesPage.close, "Close");

			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Enter any combination of letters, numbers, and wildcards (represented by the * symbol) to search for a specific Toll-Free number"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Search for Available</span> Toll-Free Numbers"));

			Reporter.log("********** Verify the message under Change History **********");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.tollFreeRouting, "Toll Free --> Routing");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.changeHistory, "Change History");

			vc.getWebDriverUtils().validatePageTitle("Change History - Windstream Enterprise");
			vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_ServicesPage.createdDate, "Created Date",
					"Custom");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.startDateCalendarIcon, "Start Date - Calendar Icon");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.dayActiveDefault, "- Default Active Date");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.applyFilters, "Apply Filters");
			Assert.assertTrue(
					vc.waitUntilTextIsPresent("Toll Free number " + selectedNumberFirstRecord + " was ordered."));

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_Products_TollFree_SearchAndActivateNewNumber() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.WOL_User);
		userStoryDescription = "Services -> Products- >Toll Free -> Search Activate";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription, testMethodName);
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.tollFreeRouting, "Toll Free --> Routing");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.searchActivateNewNumber,
					"Search and Activate New Number");

			Assert.assertTrue(vc.waitUntilTextIsPresent("Search &amp; Activate New Number  - Windstream Enterprise"));

			if (vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.selectAccountReport, "Select Account")) {
				vc.getWebDriverUtils().genericDropDownSelectFirstItem(we_ServicesPage.selectAccountReport,
						"Select Account - Search &Activate New Number");
			}

			Reporter.log("********** Step 1  -  Search for Available Toll-Free Numbers **********");
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Enter any combination of letters, numbers, and wildcards (represented by the * symbol) to search for a specific Toll-Free number"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Search for Available</span> Toll-Free Numbers"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Select Toll-Free Number(s)"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Configure </span>Routing"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Order</span>Detail"));
			// Assert.assertTrue(vc.waitUntilTextIsPresent("Confirm </span>& Submit
			// Order"));

			vc.getWebDriverUtils().genericDropDownSelectFirstItem(we_ServicesPage.selectTelephoneNo,
					"Select Telephone No");
			/*
			 * vc.getWebDriverUtils().clickElement(we_ServicesPage.
			 * checkThisBoxIfNumbersShouldBeConsecutive,
			 * "Check -Check this box if numbers should be consecutive");
			 * vc.getWebDriverUtils().clickElement(we_ServicesPage.
			 * checkThisBoxIfNumbersShouldBeConsecutive,
			 * "UnCheck - Check this box if numbers should be consecutive");
			 */
			vc.getWebDriverUtils().clickElement(we_ServicesPage.nextStep1, "Next");

			Reporter.log("********** Step 2  - Select Toll-Free Number(s) to activate **********");
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Reminder: There is a chance that your Toll-Free number may be reserved by another party before your order is completed"));
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"There is a chance that your Toll-Free number may be reserved by another party before your order is completed"));

			vc.getWebDriverUtils().clickElement(we_ServicesPage.moveAllNumbers, "Move All Numbers");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.revertAllNumbers, "Revert All Numbers");

			vc.getWebDriverUtils().clickElement(we_ServicesPage.availableTollFreeNumbersFirstRecord,
					"Available Toll Free Numbers First Record");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.rightMoveNumber, "Right Move Number -->");

			vc.getWebDriverUtils().clickElement(we_ServicesPage.selectedTollFreeNumbersFirstRecord,
					"Selected Toll Free Numbesr First Record");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.leftMoveNumber, "Left Move Number <--");

			Reporter.log("Selected Number :="
					+ vc.getWebDriverUtils().getText(we_ServicesPage.availableTollFreeNumbersFirstRecord,
							"Selected - Available Toll Free Numbers First Record"),
					true);
			vc.getWebDriverUtils().clickElement(we_ServicesPage.availableTollFreeNumbersFirstRecord,
					"Available Toll Free Numbers First Record");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.rightMoveNumber, "Right Move Number -->");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.nextStep2, "Next");

			Reporter.log("********** Step 3  - Configure Routing **********");
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Please select an existing number from the drop down below if your new number should match its configuration"));
			vc.getWebDriverUtils().genericDropDownSelectFirstItem(we_ServicesPage.tollFreeNumberToMatchConfiguration,
					"Toll Free Number to Match Configuration");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.matchConfigCheckbox, "Match Config Checkbox");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.nextStep3, "Next");

			Reporter.log("********** Step 4  - Order Detail **********");
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"If the configuration of your new number matches the configuration of an existing number,Enhanched Routing or pre-Determined Profits will be applied."));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Contact information for this order"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Configure Directory Listing / Blocking"));
			vc.getWebDriverUtils().clickElement(we_ServicesPage.nextStep4, "Next");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.submitOrder, "Submit Order");

			Assert.assertTrue(vc.waitUntilTextIsPresent("Thank you!"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Your order has been submitted"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Please contact your order has been submitted"));
			Assert.assertTrue(
					vc.waitUntilTextIsPresent("A confirmation E-mail will be sent to the addrees you provided"));
			Reporter.log(vc.getWebDriverUtils().getText(we_ServicesPage.confirmationNumber, "Confirmation Number"),
					true);
			vc.getWebDriverUtils().clickElement(we_ServicesPage.tollFreeHome, "Toll Free Home");

			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Enter any combination of letters, numbers, and wildcards (represented by the * symbol) to search for a specific Toll-Free number"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Search for Available</span> Toll-Free Numbers"));

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_Products_TollFree_ChangeHistory() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.WOL_User);
		userStoryDescription = "Services -> Products- >Toll Free -> ChangeHistory";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription, testMethodName);
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.tollFreeRouting, "Toll Free --> Routing");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.changeHistory, "ChangeHistory");

			Assert.assertTrue(vc.waitUntilTextIsPresent("Change History  - Windstream Enterprise"));

			if (vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.selectAccountReport, "Select Account")) {
				vc.getWebDriverUtils().genericDropDownSelectFirstItem(we_ServicesPage.selectAccountReport,
						"Select Account - Summary of Toll-Free Change");
			}

			Assert.assertTrue(vc.waitUntilTextIsPresent("Created Date"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("User"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Event Description"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Message"));

			if (!vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.applyFilters, "Filter - Apply Filters")) {
				vc.getWebDriverUtils().clickElement(we_ServicesPage.filters, "Filter Open");
			}

			vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_ServicesPage.createdDate, "Created Date",
					"Custom");
			vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_ServicesPage.createdDate, "Created Date",
					"Past 30 Days");
			vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_ServicesPage.createdDate, "Created Date",
					"Past 60 Days");
			vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_ServicesPage.createdDate, "Created Date",
					"Past 6 Months");
			vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_ServicesPage.createdDate, "Created Date",
					"All");
			vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_ServicesPage.createdDate, "Created Date",
					"Past Year");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.applyFilters, "Apply Filters");

			Assert.assertTrue(vc.waitUntilTextIsPresent("Event Description"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Message"));

			vc.getWebDriverUtils().clickElement(we_ServicesPage.clearFilters, "Clear Filters");
			Assert.assertEquals(vc.getWebDriverUtils().getAttribute(we_ServicesPage.createdDate, "title",
					"Get Created Date - Default Value"), "All", "Created Date Default should set to All");

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	/*
	 * @Test public void Services_Tools_Locations() throws Throwable { Menu menu =
	 * MenuFactory.getModule1MenuByTitle(module1AppMenu.ELNK_User);
	 * userStoryDescription = "Locations"; we_LoginPage.navigateTo_WEHome(menu);
	 * winHandleBefore = driver.getWindowHandle(); try {
	 * vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
	 * "Services-> Tools -> Locations");
	 * vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
	 * vc.getWebDriverUtils().clickElement(we_ServicesPage.toolsSubMenu, "Tools");
	 * vc.getWebDriverUtils().clickElement(we_ServicesPage.locations, "Locations");
	 * 
	 * if (!vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.applyFilters,
	 * "Apply Filters")) {
	 * vc.getWebDriverUtils().clickElement(we_ServicesPage.filterLocations,
	 * "Filters"); } Assert.assertTrue(vc.
	 * waitUntilTextIsPresent("Manage Locations  - Windstream Enterprise"));
	 * Assert.assertTrue(vc.waitUntilTextIsPresent("Account"));
	 * Assert.assertTrue(vc.waitUntilTextIsPresent("Name"));
	 * Assert.assertTrue(vc.waitUntilTextIsPresent("Address"));
	 * Assert.assertTrue(vc.waitUntilTextIsPresent("WAN Circuit ID"));
	 * Assert.assertTrue(vc.waitUntilTextIsPresent("Bandwidth"));
	 * Assert.assertTrue(vc.waitUntilTextIsPresent("Service(s)"));
	 * Assert.assertTrue(vc.waitUntilTextIsPresent("Managed Router"));
	 * Assert.assertTrue(vc.waitUntilTextIsPresent("Export"));
	 * 
	 * vc.getWebDriverUtils().clickElement(we_ServicesPage.exportLocations,
	 * "Export"); Assert.assertTrue(vc.waitUntilTextIsPresent("Export to Excel"));
	 * Assert.assertTrue(vc.waitUntilTextIsPresent("Export to PDF"));
	 * vc.getWebDriverUtils().clickElement(we_ServicesPage.exportLocations,
	 * "Export");
	 * 
	 * vc.getWebDriverUtils().clickElement(we_ServicesPage.applyFilters,
	 * "Apply Filters"); Assert.assertTrue(vc.
	 * waitUntilTextIsPresent("Please enter atleast one filter values"));
	 * 
	 * } catch (Throwable e) { e.printStackTrace(); Reporter.log(testMethodName +
	 * " ==> " + "Test case Failed", true);
	 * vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error"); }
	 * Reporter.log(testMethodName + " ==> " + "Test case passed", true); }
	 */

	@Test
	public void Services_Tools_Locations() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.ELNK_User);
		userStoryDescription = "Locations";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription, "Services-> Tools -> Locations");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.toolsSubMenu, "Tools");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.mergeLocations, "Merge Locations");

			/*
			 * if (!vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.applyFilters,
			 * "Apply Filters")) {
			 * vc.getWebDriverUtils().clickElement(we_ServicesPage.filterLocations,
			 * "Filters"); }
			 */
			vc.getWebDriverUtils().validatePageTitle("Company Settings - Windstream Enterprise");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Company Settings / Location Management"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Location Merge Manager"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Move"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Pin"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Mode"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Location Name"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Address"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Alias"));

			vc.getWebDriverUtils().clickElement(we_ServicesPage.locationMergeManagerCheckbox,
					"Location Merge Manager - Checkbox");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.cancelLocationMerge, "Cancel Location Merge");

			vc.getWebDriverUtils().clickElement(we_ServicesPage.locationMergeManagerCheckbox,
					"Location Merge Manager - Checkbox");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.closeLocationMerge, "Close X Location Merge");

			vc.getWebDriverUtils().clickElement(we_ServicesPage.locationMergeManagerCheckbox,
					"Location Merge Manager - Checkbox");
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Enabling the Location Merge Manager allows you to define your preferred view as new locations"));
			vc.getWebDriverUtils().clickElement(we_ServicesPage.enableLocationMerge, "Enable Location Merge");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Location Merge Manager successfully enabled"));

			vc.getWebDriverUtils().clickElement(we_ServicesPage.locationMergeManagerCheckbox,
					"Location Merge Manager - Checkbox");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Location Merge Manager successfully disabled"));

			vc.getWebDriverUtils().enterText(we_ServicesPage.locationSearch, "JILL", "Location Search");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.locationSearch, "Location Search");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.resetSearch, "Reset Search");

			Reporter.log("********** Security Levels ************", true);
			vc.getWebDriverUtils().clickElement(we_ServicesPage.securityLevelsContentTab,
					"Security Levels Content Tab");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Company Name"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Security Level"));
			vc.getWebDriverUtils().clickElement(we_ServicesPage.saveChanges, "Save Changes");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Your company settings have been saved successfully"));

			Reporter.log("********** Back to locations content tab ************", true);
			vc.getWebDriverUtils().clickElement(we_ServicesPage.locationsContentTab, "Locations Content Tab");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.downloadLocations, "Download Locations");
			/*
			 * Assert.assertTrue(vc.waitUntilTextIsPresent("Export"));
			 * 
			 * vc.getWebDriverUtils().clickElement(we_ServicesPage.exportLocations,
			 * "Export"); Assert.assertTrue(vc.waitUntilTextIsPresent("Export to Excel"));
			 * Assert.assertTrue(vc.waitUntilTextIsPresent("Export to PDF"));
			 * vc.getWebDriverUtils().clickElement(we_ServicesPage.exportLocations,
			 * "Export");
			 * 
			 * vc.getWebDriverUtils().clickElement(we_ServicesPage.applyFilters,
			 * "Apply Filters"); Assert.assertTrue(vc.
			 * waitUntilTextIsPresent("Please enter atleast one filter values"));
			 */

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_Tools_Locations_WOL() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.WOL_User);
		userStoryDescription = "Locations";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription, "Services-> Tools -> Locations");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.toolsSubMenu, "Tools");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.locations, "Locations");

			if (!vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.applyFilters, "Apply Filters")) {
				vc.getWebDriverUtils().clickElement(we_ServicesPage.filterLocations, "Filters");
			}
			Assert.assertTrue(vc.waitUntilTextIsPresent("Manage Locations  - Windstream Enterprise"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Account"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Name"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Address"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("WAN Circuit ID"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Bandwidth"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Service(s)"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Managed Router"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Export"));

			vc.getWebDriverUtils().clickElement(we_ServicesPage.exportLocations, "Export");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Export to Excel"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Export to PDF"));
			vc.getWebDriverUtils().clickElement(we_ServicesPage.exportLocations, "Export");

			vc.getWebDriverUtils().clickElement(we_ServicesPage.applyFilters, "Apply Filters");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter atleast one filter values"));

			driver.navigate().refresh();
			vc.getWebDriverUtils().checkPageIsReady();
			if (!vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.applyFilters, "Apply Filters")) {
				vc.getWebDriverUtils().clickElement(we_ServicesPage.filterLocations, "Filters");
			}
			vc.getWebDriverUtils().enterText(we_ServicesPage.managedRouter, "true", "Managed Router Input");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.applyFilters, "Apply Filters");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.accountSort, "Account Sort");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.nameSort, "Name Sort");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.addressSort, "Address Sort");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.wanCircuitIDSort, "WAN Circuit ID Sort");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.bandwidthSort, "Bandwidth Sort");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.servicesSort, "Service(s) Sort");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.managedRouterSort, "Managed Router Sort");

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_Tools_SpeedTest() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.ELNK_User);
		userStoryDescription = "Speed Test";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription, "Services-> Tools -> SpeedTest");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");

			if (!vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.toolsSubMenu, "Tools")) {
				vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			}
			vc.getWebDriverUtils().clickElement(we_ServicesPage.toolsSubMenu, "Tools");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.speedTest, "Speed Test");

			driver.getWindowHandles();
			Set<String> allHandles = driver.getWindowHandles();
			for (String currentHandle : allHandles) {
				if (!currentHandle.equals(winHandleBefore)) {
					driver.switchTo().window(currentHandle);
					Assert.assertTrue(vc.waitUntilTextIsPresent("Windstream Speedtest"));
					Assert.assertTrue(vc.waitUntilTextIsPresent("click here"));
					Assert.assertTrue(vc.waitUntilTextIsPresent("FAQ's related to Speedtest results"));
					driver.close();
					driver.switchTo().window(winHandleBefore);
				}
			}
			Assert.assertTrue(vc.waitUntilTextIsPresent("Speed Test"));

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_Tools_SpeedTest_WOL() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.WOL_User);
		userStoryDescription = "Speed Test";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription, "Services-> Tools -> SpeedTest");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");

			if (!vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.toolsSubMenu, "Tools")) {
				vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			}
			vc.getWebDriverUtils().clickElement(we_ServicesPage.toolsSubMenu, "Tools");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.speedTest, "Speed Test");

			driver.getWindowHandles();
			Set<String> allHandles = driver.getWindowHandles();
			for (String currentHandle : allHandles) {
				if (!currentHandle.equals(winHandleBefore)) {
					driver.switchTo().window(currentHandle);
					Assert.assertTrue(vc.waitUntilTextIsPresent("Windstream Speedtest"));
					Assert.assertTrue(vc.waitUntilTextIsPresent("click here"));
					Assert.assertTrue(vc.waitUntilTextIsPresent("FAQ's related to Speedtest results"));
					driver.close();
					driver.switchTo().window(winHandleBefore);
				}
			}
			Assert.assertTrue(vc.waitUntilTextIsPresent("Speed Test"));

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_Tools_ActiveServices() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.ELNK_User);
		userStoryDescription = "Active Services";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription, "Services-> Tools -> Active Services");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.toolsSubMenu, "Tools");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.activeServices, "Active Services");

			Assert.assertTrue(vc.waitUntilTextIsPresent("View Active Services  - Windstream Enterprise"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Filters"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Product Type"));

			if (!vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.applyFilters, "Filter Options")) {
				vc.getWebDriverUtils().clickElement(we_ServicesPage.filters, "Filters - Open");
			}

			vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_ServicesPage.productFamily, "Product Family",
					"All");
			vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_ServicesPage.productType, "Product Type",
					"All");
			vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_ServicesPage.product, "Product", "All");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.applyFilters, "Apply Filters");

			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.activeServicesTable,
					"Active Services Table Validation"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Access Services"));

			vc.getWebDriverUtils().clickElement(we_ServicesPage.clearFilters, "Clear Filters");

			if (vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.applyFilters, "Filter Options")) {
				vc.getWebDriverUtils().clickElement(we_ServicesPage.filters, "Filters - Close");
			}

			Assert.assertFalse(vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.applyFilters,
					"Apply Filters - shouldn't display when filter is closed"));

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_Tools_ActiveServices_WOL() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.WOL_User);
		userStoryDescription = "Active Services";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription, "Services-> Tools -> Active Services");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.toolsSubMenu, "Tools");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.activeServices, "Active Services");

			Assert.assertTrue(vc.waitUntilTextIsPresent("View Active Services  - Windstream Enterprise"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Filters"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Product Type"));

			if (!vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.applyFilters, "Filter Options")) {
				vc.getWebDriverUtils().clickElement(we_ServicesPage.filters, "Filters - Open");
			}

			vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_ServicesPage.productFamily, "Product Family",
					"All");
			vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_ServicesPage.productType, "Product Type",
					"All");
			vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_ServicesPage.product, "Product", "All");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.applyFilters, "Apply Filters");

			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.activeServicesTable,
					"Active Services Table Validation"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Complete Voice - Line"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Data"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Managed Router"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("POTS"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("SD-WAN"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Voice"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Voice Usage"));

			vc.getWebDriverUtils().clickElement(we_ServicesPage.clearFilters, "Clear Filters");

			if (vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.applyFilters, "Filter Options")) {
				vc.getWebDriverUtils().clickElement(we_ServicesPage.filters, "Filters - Close");
			}

			Assert.assertFalse(vc.getWebDriverUtils().elementAvailablity(we_ServicesPage.applyFilters,
					"Apply Filters - shouldn't display when filter is closed"));

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_Tools_NetworkTools() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.ELNK_User);
		userStoryDescription = "Services_Tools_NetworkTools";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription, "Services-> Tools -> Network Tools");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.toolsSubMenu, "Tools");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.networkTools, "Network Tools");

			Assert.assertTrue(vc.waitUntilTextIsPresent("Network Tools  - Windstream Enterprise"));

			vc.getWebDriverUtils().clickElement(we_ServicesPage.availability, "Availability");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Router Availability"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Do a quick check on the status of your device"));

			vc.getWebDriverUtils().clickElement(we_ServicesPage.networkUtilization, "NetworkUtilization");
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Each monitored router interface for the data circuit(s) in your account is listed below"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Click on the column headers to sort by your preference"));

			vc.getWebDriverUtils().clickElement(we_ServicesPage.routerPerformance, "RouterPerformance");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Check performance metrics on your devices"));

			vc.getWebDriverUtils().clickElement(we_ServicesPage.routerConfiguration, "RouterConfiguration");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Router Configuration Files"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Select a location and an associated device below"));

			vc.getWebDriverUtils().clickElement(we_ServicesPage.chronicWatchList, "ChronicWatch");
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"The Chronic Watch List provides a view of customer routers or interfaces that experience events"));
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Three or more ping-triggered outage service tickets within a 48 hour period"));
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Five or more ping-triggered outage service tickets within a 30 day period"));

			vc.getWebDriverUtils().clickElement(we_ServicesPage.thresholdManager, "ThresholdManager");
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"This is the place to manage the value of your Network Utilization thresholds"));

			vc.getWebDriverUtils().clickElement(we_ServicesPage.overview, "Overview");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Your Network Overview"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Click on the column headers to sort by your preference"));

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_MyServices_MyCallLog() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.TestCase4);
		userStoryDescription = "Services -> My Services -> My Call Log";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription, "Services-> My Services -> My Call Log");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.MyServices, "My Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.myCallLog, "My Call Log");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Filters"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Call Date/Time"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Direction"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Phone Number"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Name"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Answered By"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Duration"));

			vc.getWebDriverUtils().clickElement(we_ServicesPage.menuFilterClickToOpen, "Menu Filter Open");
			Assert.assertTrue(vc.waitUntilTextIsPresent("The phone icons on the left are all Click-to-Dial buttons"));

			vc.getWebDriverUtils().clickElement(we_ServicesPage.myCallHistoryApplyFilter, "Apply Filters");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter atleast one filter values"));

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_MyServices_MyCallGroups() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.TestCase4);
		userStoryDescription = "Services -> My Services -> My Call Groups";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription, "Services-> My Services -> My Call Groups");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.MyServices, "My Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.myCallGroups, "My Call Groups");

			Assert.assertTrue(vc.waitUntilTextIsPresent("Group Name"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Extension"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Group Type"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("My Status"));

			vc.getWebDriverUtils().clickElement(we_ServicesPage.expandableButtonDown, "Expandable Button Down");
			Assert.assertTrue(vc.waitUntilTextIsPresent("ID"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("First Name"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Last Name"));
			vc.getWebDriverUtils().clickElement(we_ServicesPage.expandableButtonUp, "Expandable Button Up");

			vc.getWebDriverUtils().clickElement(we_ServicesPage.export, "Export");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Export to Excel"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Export to PDF"));

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_MyServices_MyPhones() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.TestCase4);
		userStoryDescription = "Services -> My Services -> My Phones";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription, "Services-> My Services -> My Phones");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.MyServices, "My Services");
			vc.getWebDriverUtils().isElementPresentCheckUsingJavaScriptExecutor(we_ServicesPage.myPhones);
			vc.getWebDriverUtils().clickElement(we_ServicesPage.myPhones, "My Phones");

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_Products_OfficeSuite_CCSExtension() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.TestCase4);
		userStoryDescription = "Services -> Products -> Office Suite -> CCS Extension";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			Reporter.log("Test Case 119495: Check whether CCS Extension option available under Services -> Products",
					true);
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
					"Services -> Products -> Office Suite -> CCS Extension");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.officeSuite, "Office Suite");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.ccsExtension, "CCS Extension");

			Reporter.log(
					"Test Case 119496: Verify whether CCS Extensions page appears on clicking CCS Extensions option and also validate the page",
					true);
			Assert.assertTrue(vc.waitUntilTextIsPresent("Name"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Extension"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Permission Group"));

			Reporter.log("Test Case 119500: Verify whether an user able to change permission group - CCS Extension",
					true);
			String defaultPermissionGroup = vc.getWebDriverUtils()
					.getAttribute(we_ServicesPage.permissionGroupFirstRecord, "title", "Default Permission Group");

			// vc.getWebDriverUtils().dropDownInnerSelectPicker(we_ServicesPage.permissionGroupFirstRecord,"Permission
			// Group List", "test3");
			vc.getWebDriverUtils().dropDownInnerSelectPicker(we_ServicesPage.permissionGroupFirstRecord,
					we_HomePage.dropDownInnserSelect, "Permission Group List", "test3");
			vc.getWebDriverUtils().highLightElement(we_ServicesPage.permissionGroupFirstRecord);
			vc.getWebDriverUtils().getAttribute(we_ServicesPage.permissionGroupFirstRecord, "title",
					"Change Permission Group");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.saveCCSExtension, "Save CCS Extension");
			Assert.assertTrue(vc.waitUntilTextIsPresent("CCS Extensions updated successfully"));

			String updatedPermissionGroup = vc.getWebDriverUtils()
					.getAttribute(we_ServicesPage.permissionGroupFirstRecord, "title", "Change Permission Group");
			if (defaultPermissionGroup != updatedPermissionGroup) {
				Reporter.log("Successfully able to change permission group, default value:= " + defaultPermissionGroup
						+ " updated to :=" + updatedPermissionGroup, true);
			} else {
				Assert.assertTrue(false);
				Reporter.log("Change permission group is Unsuccessful, default value:= " + defaultPermissionGroup
						+ " updated to :=" + updatedPermissionGroup, true);
			}

			// vc.getWebDriverUtils().clickElement(we_ServicesPage.permissionGroupFirstRecord,
			// "Permission Group List Box");
			Reporter.log("Test Case 119501: Verify apply and clear filters functionality - CCS Extension", true);
			if (!vc.getWebDriverUtils()
					.isElementPresentCheckUsingJavaScriptExecutor(we_ServicesPage.ccsExtensionsController_Name)) {
				vc.getWebDriverUtils().clickLinkText("Filters");
			}
			vc.getWebDriverUtils().enterText(we_ServicesPage.ccsExtensionsController_Name,
					we_ServicesPage.ccsNameFirstRecord.getText(), "Name");
			vc.getWebDriverUtils().enterText(we_ServicesPage.ccsExtensionsController_Extension,
					we_ServicesPage.ccsExtension.getText(), "Extension");
			vc.getWebDriverUtils().enterText(we_ServicesPage.ccsExtensionsController_PermissionGroupSelectedValue,
					we_ServicesPage.permissionGroupFirstRecord.getText(), "Permission group");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.applyFilters, "Apply Filters");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.clearFilters, "Clear Filters");

			Reporter.log("Test Case 119502: Verify export functionality - CCS Extension", true);
			vc.getWebDriverUtils().clickElement(we_ServicesPage.export, "Export");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Export to Excel"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Export to PDF"));

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_Products_OfficeSuite_PhoneKeyProfiles() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.TestCase3);
		userStoryDescription = "Services -> Products -> Office Suite -> PhoneKeyProfiles";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
					"Services -> Products -> Office Suite -> PhoneKeyProfiles");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.officeSuite, "Office Suite");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.phoneKeyProfiles, "PhoneKeyProfiles");

			Assert.assertTrue(vc.waitUntilTextIsPresent("Phone Key Profiles"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("GetPhoneProfileKeyFrame"));

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_Products_Conferencing() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.WOL_User);
		userStoryDescription = "Services -> Products -> Conferencing";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription, "Services -> Products -> Conferencing");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.conferencing, "Conferencing");

			driver.getWindowHandles();
			Set<String> allHandles = driver.getWindowHandles();
			for (String currentHandle : allHandles) {
				if (!currentHandle.equals(winHandleBefore)) {
					driver.switchTo().window(currentHandle);
					System.out.println(driver.switchTo().window(currentHandle).getTitle());
					String childWindow = driver.getWindowHandle();
					vc.getWebDriverUtils().checkPageIsReady();
					Assert.assertTrue(vc.waitUntilTextIsPresent(
							"Facilitate efficient and cost-effective communication among your employees"));
					// Join A Conference
					vc.getWebDriverUtils().clickElement(we_ServicesPage.joinAConference, "Join A Conference");

					Set<String> childHandles = driver.getWindowHandles();
					for (String currentChildHandle : childHandles) {

						if (!(currentChildHandle == winHandleBefore) && !(currentChildHandle == childWindow)) {
							// driver.switchTo().window(currentChildHandle);
							// System.out.println(driver.switchTo().window(currentChildHandle).getTitle());
							System.out.println(driver.getTitle());
							Assert.assertTrue(vc.waitUntilTextIsPresent("Join a Conference"));
							Assert.assertTrue(vc.waitUntilTextIsPresent(
									"https://core.callinfo.com/interface/guest.jsp?host=paetec"));
							break;

						}
					}
					// driver.switchTo().window(childWindow);
					break;
				}
			}
			// driver.close();
			driver.switchTo().window(winHandleBefore);

			Assert.assertTrue(vc.waitUntilTextIsPresent("Windstream Communications, LLC. All rights reserved"));

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_Products_OfficeSuite_AutoAttendants() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.TestCase1);
		userStoryDescription = "Services_Products_OfficeSuite_AutoAttendants";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
					"Services_Products_OfficeSuite_AutoAttendants");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.officeSuite, "Office Suite");

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_Products_OfficeSuite_BusinessHours() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.TestCase4);
		userStoryDescription = "Services_Products_OfficeSuite_BusinessHours";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {

			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.officeSuite, "Office Suite");
			vc.getWebDriverUtils().clickSubMenuOption("Business Hours");
			Assert.assertTrue((vc.waitUntilTextIsPresent("BusinessHours")));

			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.addBusinessHoursProfile,
					"Add Business Hours Profile");
			Assert.assertTrue((vc.waitUntilTextIsPresent("Associate Profile with Hours")));
			Assert.assertTrue((vc.waitUntilTextIsPresent("Associate Profile with Incoming Numbers")));
			Assert.assertTrue((vc.waitUntilTextIsPresent("Associate Profile with Locations")));
			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.cancel, "Cancel");
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(we_BusinessHoursPage.filterOpen, "Filter Open"),
					"Filter Open Validation");

			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.addBusinessHoursProfile,
					"Add Business Hours Profile");
			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.associateProfileWithHours,
					"Associate Profile with Hours");
			Assert.assertTrue((vc.waitUntilTextIsPresent("Operating Hours")));

			vc.getWebDriverUtils().unSelectCheckbox(we_BusinessHoursPage.checkBoxMonday, "Uncheck Monday");
			vc.getWebDriverUtils().unSelectCheckbox(we_BusinessHoursPage.checkBoxTuesday, "Uncheck Tuesday");
			vc.getWebDriverUtils().unSelectCheckbox(we_BusinessHoursPage.checkBoxWednesday, "Uncheck Wednesday");
			vc.getWebDriverUtils().unSelectCheckbox(we_BusinessHoursPage.checkBoxThursday, "Uncheck Thursday");
			vc.getWebDriverUtils().unSelectCheckbox(we_BusinessHoursPage.checkBoxFriday, "Uncheck Friday");
			vc.getWebDriverUtils().unSelectCheckbox(we_BusinessHoursPage.checkBoxSaturday, "Uncheck Saturday");
			vc.getWebDriverUtils().unSelectCheckbox(we_BusinessHoursPage.checkBoxSunday, "Uncheck Sunday");

			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.submit, "Submit");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter profile name"));
			String strProfileName = "test" + Math.random();
			vc.getWebDriverUtils().enterText(we_BusinessHoursPage.profileNameText, strProfileName,
					"Profile Name enetered as : " + strProfileName);

			vc.getWebDriverUtils().selectCheckbox(we_BusinessHoursPage.checkBoxMonday, "Check Monday");
			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.submit, "Submit");
			Assert.assertTrue((vc.waitUntilTextIsPresent("Lunch Hours From/To should not be an empty and equal for")));
			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.okValidationMsg,
					"Business Hours Notification - OK");

			vc.getWebDriverUtils().enterText(we_BusinessHoursPage.operatingFromMonday, "4:00 AM",
					"operatingFromMonday");
			vc.getWebDriverUtils().enterText(we_BusinessHoursPage.operatingToMonday, "4:00 PM", "operatingToMonday");

			vc.getWebDriverUtils().enterText(we_BusinessHoursPage.lunchFromMonday, "6:00 AM", "lunchFromMonday");
			vc.getWebDriverUtils().enterText(we_BusinessHoursPage.lunchToMonday, "6:30 AM", "lunchToMonday");

			vc.getWebDriverUtils().enterText(we_BusinessHoursPage.specialFromMonday, "9:00 AM", "specialFromMonday");
			vc.getWebDriverUtils().enterText(we_BusinessHoursPage.specialToMonday, "9:30 AM", "specialToMonday");

			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.associateProfileWithHours,
					"Associate Profile with Hours");

			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.associateProfileWithIncomingNumbers,
					"Associate Profile with Incoming Numbers");
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"To manage the handling and routing of incoming calls to DIDs according to a unique business hours profile"));
			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.selectAllPhonenum, "Select All Phone Numbers");
			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.deSelectAllPhonenum, "DeSelect All Phone Numbers");
			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.associateProfileWithIncomingNumbers,
					"Associate Profile with Incoming Numbers");

			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.associateProfileWithLocations,
					"Associate Profile with Locations ");
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"To manage the handling and routing of outgoing calls according to a unique business hours profile"));
			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.selectAllLocation, "Select All Locations");
			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.deSelectAllLocation, "DeSelect Locations");
			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.associateProfileWithLocations,
					"Associate Profile with Locations ");

			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.submit, "Submit");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Profile created Successfully"));
			if (vc.getWebDriverUtils().elementAvailablity(we_BusinessHoursPage.filterOpen, "Filter Open")) {
				vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.filterOpen, "Filter Open");
			}

			Assert.assertTrue(vc.waitUntilTextIsPresent("Profile Name"));

			vc.getWebDriverUtils().enterText(we_BusinessHoursPage.profileNameSearch, strProfileName,
					"Search Profile Name");
			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.applyFilters, "Apply Filters");
			// vc.getWebDriverUtils().getText(we_BusinessHoursPage.firstRecordBusinessHoursProfile,
			// "Business Hours Search Profile").trim().equals(strProfileName);
			Assert.assertTrue(
					vc.getWebDriverUtils()
							.getText(we_BusinessHoursPage.firstRecordBusinessHoursProfile,
									"Business Hours Search Profile")
							.trim().equals(strProfileName),
					"Profile Name Validation");

			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.editBusinessHours, "Edit Business Hours Profile");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Edit Business Hours Profile"));

			String strEditProfileName = "test" + Math.random();
			vc.getWebDriverUtils().enterText(we_BusinessHoursPage.profileNameText, strEditProfileName,
					"Profile Name edited as : " + strEditProfileName);

			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.associateProfileWithHours,
					"Associate Profile with Hours");
			Assert.assertTrue((vc.waitUntilTextIsPresent("Operating Hours")));
			vc.getWebDriverUtils().unSelectCheckbox(we_BusinessHoursPage.useThisProfileDefaultBusinessHoursCheckbox,
					"UnSelect Checkbox - Use this profile as the company’s default business hours");

			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.submit, "Submit");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Profile edited Successfully"));
			if (vc.getWebDriverUtils().elementAvailablity(we_BusinessHoursPage.filterOpen, "Filter Open")) {
				vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.filterOpen, "Filter Open");
			}

			Assert.assertTrue(vc.waitUntilTextIsPresent("Profile Name"));
			vc.getWebDriverUtils().enterText(we_BusinessHoursPage.profileNameSearch, strEditProfileName,
					"Search Profile Name");
			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.applyFilters, "Apply Filters");
			// vc.getWebDriverUtils().getText(we_BusinessHoursPage.firstRecordBusinessHoursProfile,
			// "Business Hours Search Profile").trim().equals(strProfileName);
			Assert.assertTrue(
					vc.getWebDriverUtils()
							.getText(we_BusinessHoursPage.firstRecordBusinessHoursProfile,
									"Business Hours Search Profile")
							.trim().equals(strEditProfileName),
					"Profile Name Validation");

			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.deleteBusinessHours,
					"Delete Business Hours Profile");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Are you sure you want to delete this profile"));
			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.deleteProfileCancel,
					"Delete Business Hours Profile - Cancel");

			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.deleteBusinessHours,
					"Delete Business Hours Profile");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Are you sure you want to delete this profile"));
			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.deleteProfileOk,
					"Delete Business Hours Profile - Ok");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Deleted Successfully"));

			if (vc.getWebDriverUtils().elementAvailablity(we_BusinessHoursPage.filterOpen, "Filter Open")) {
				vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.filterOpen, "Filter Open");
			}

			Assert.assertTrue(vc.waitUntilTextIsPresent("Profile Name"));
			vc.getWebDriverUtils().enterText(we_BusinessHoursPage.profileNameSearch, strEditProfileName,
					"Search Profile Name");
			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.applyFilters, "Apply Filters");
			Assert.assertTrue(vc.waitUntilTextIsPresent("No items to display"));

			if (vc.getWebDriverUtils().elementAvailablity(we_BusinessHoursPage.filterOpen, "Filter Open")) {
				vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.filterOpen, "Filter Open");
			}

			Assert.assertTrue(vc.waitUntilTextIsPresent("Profile Name"));
			vc.getWebDriverUtils().enterText(we_BusinessHoursPage.profileNameSearch, "test",
					"Mark a profile as default");
			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.applyFilters, "Apply Filters");

			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.editBusinessHours, "Edit Business Hours Profile");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Edit Business Hours Profile"));
			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.associateProfileWithHours,
					"Associate Profile with Hours");
			Assert.assertTrue((vc.waitUntilTextIsPresent("Operating Hours")));
			vc.getWebDriverUtils().selectCheckbox(we_BusinessHoursPage.useThisProfileDefaultBusinessHoursCheckbox,
					"Select Checkbox - Use this profile as the company’s default business hours");

			String strDefaultProfile = "test" + Math.random();
			vc.getWebDriverUtils().enterText(we_BusinessHoursPage.profileNameText, strDefaultProfile,
					"Profile Name for Default edited as : " + strDefaultProfile);

			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.associateProfileWithHours,
					"Associate Profile with Hours");
			Assert.assertTrue((vc.waitUntilTextIsPresent("Operating Hours")));
			vc.getWebDriverUtils().selectCheckbox(we_BusinessHoursPage.useThisProfileDefaultBusinessHoursCheckbox,
					"Select Checkbox - Use this profile as the company’s default business hours");

			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.submit, "Submit");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Profile edited Successfully"));
			if (vc.getWebDriverUtils().elementAvailablity(we_BusinessHoursPage.filterOpen, "Filter Open")) {
				vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.filterOpen, "Filter Open");
			}

			Assert.assertTrue(vc.waitUntilTextIsPresent("Profile Name"));
			vc.getWebDriverUtils().enterText(we_BusinessHoursPage.profileNameSearch, strDefaultProfile,
					"Search Profile Name");
			vc.getWebDriverUtils().clickElement(we_BusinessHoursPage.applyFilters, "Apply Filters");
			Assert.assertTrue(
					vc.getWebDriverUtils()
							.getText(we_BusinessHoursPage.firstRecordBusinessHoursProfile,
									"Business Hours Search Profile")
							.trim().equals(strDefaultProfile),
					"Profile Name Validation");
			Assert.assertTrue(vc.waitUntilTextIsPresent("COMPANY DEFAULT"));

			if (vc.getWebDriverUtils().elementAvailablity(we_BusinessHoursPage.deleteBusinessHours,
					"Delete Business Hours Profile Icon validation for Company Default")) {
				Reporter.log("Delete Business Hours Profile Icon is available for Company Default", true);
				Assert.assertTrue(false);
			} else {
				Reporter.log("Delete Business Hours Profile Icon is not available for Company Default as expected",
						true);
			}

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_Products_OfficeSuite_ManageDepartments() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.TestCase2);
		userStoryDescription = "Services_Products_OfficeSuite_ManageDepartments";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			Reporter.log(
					"Test Case 118918: Check whether Manage departments option available under Services -> Products",
					true);
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
					"Services_Products_OfficeSuite_ManageDepartments");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.officeSuite, "Office Suite");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.manageDepartments, "Manage Departments");

			Reporter.log(
					"Test Case 118919: Verify whether Manage departments page appears on clicking Manage departments option and also validate the page ",
					true);

			Assert.assertTrue(vc.waitUntilTextIsPresent("Manage Departments"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Department Name"));

			/*
			 * vc.getWebDriverUtils().clickElement(we_ServicesPage.createNewDepartment,
			 * "Create New Department"); Assert.assertTrue(vc.
			 * waitUntilTextIsPresent("Single clicking an entry will move it from left to right and right to left"
			 * )); vc.getWebDriverUtils().mouseHoveronElement(we_ServicesPage.
			 * closeXDepartmentDialog);
			 * vc.getWebDriverUtils().clickElement(we_ServicesPage.closeXDepartmentDialog,
			 * "Close X");
			 */
			vc.getWebDriverUtils().clickElement(we_ServicesPage.createNewDepartment, "Create New Department");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.saveDepartment, "Save Department");
			Assert.assertTrue(vc.waitUntilTextIsPresent("This Field is Required"));
			vc.getWebDriverUtils().enterText(we_ServicesPage.departmentName, "test123", "Department Name");
			vc.getWebDriverUtils().enterText(we_ServicesPage.availableUsersSearch, "test", "Available Users Search");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.markAllAffected, "Mark All Affected");
			vc.getWebDriverUtils().enterText(we_ServicesPage.selectedUsersSearch, "test", "Selected Users Search");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.markAllUnAffected, "Mark All UnAffected");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.saveDepartment, "Save Department");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Successfully saved department"));

			vc.getWebDriverUtils().clickElement(we_ServicesPage.editDepartment, "Edit Department");
			vc.getWebDriverUtils().enterText(we_ServicesPage.departmentName, "edittest123", "Department Name");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.saveDepartment, "Save Department");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Successfully saved department"));

			vc.getWebDriverUtils().clickElement(we_ServicesPage.deleteDepartment, "Delete Department");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Are you sure you want to delete this record"));
			vc.getWebDriverUtils().clickElement(we_ServicesPage.noDeleteDepartment, "Click No on Delete Department");

			vc.getWebDriverUtils().clickElement(we_ServicesPage.deleteDepartment, "Delete Department");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Are you sure you want to delete this record"));
			vc.getWebDriverUtils().clickElement(we_ServicesPage.yesDeleteDepartment, "Click Yes on Delete Department");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Successfully deleted department"));

			Reporter.log("Test Case 118920: Validate create new department page ", true);
			Reporter.log("Test Case 118922: Verify create new department functionality", true);
			Reporter.log(
					"Test Case 118923: Check whether an user not allowed to create a profile by leaving profile name field blank",
					true);
			Reporter.log("Test Case 118926: Validate the close functionality in create new department page", true);
			Reporter.log("Test Case 118927: Check whether an user able to add multiple users in an department", true);
			Reporter.log(
					"Test Case 118974: Verify whether user able to deselect the selected users in create new department",
					true);
			Reporter.log("Test Case 118978: Verify edit functionality - Manage departments", true);
			Reporter.log("Test Case 118982: Verify delete functionality - Manage departments", true);
			Reporter.log("Test Case 118987: Verify close and cancel options in delete functionality", true);

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	// **************** Business details Test Scripts Starts Here
	// *****************//

	@Test
	public void Services_Products_OfficeSuite_Businessdetails() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.BVN_User);
		userStoryDescription = "Services-> Products -> OfficeSuite -> Business details";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();

		try {
			Reporter.log(
					"109617 Check whether “Business details” option available in the Services Menu & 109618 Check whether “Business details” page opens on clicking business details in services menu ",
					true);
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
					"Services-> Products -> OfficeSuite -> Business details");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.officeSuite, "Office Suite");
			vc.getWebDriverUtils().clickSubMenuOption("Business Details");

			Assert.assertTrue(vc.waitUntilTextIsPresent("Business Details"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(we_BusinessDetailsPage.defaultRingtones,
					"Check for Default Ringtones"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(we_BusinessDetailsPage.defaultRingtones,
					"Check for Default Ringtones presence"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(we_BusinessDetailsPage.accountCodes,
					"Check for Account Codes presence"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(we_BusinessDetailsPage.musicOnHold,
					"Check for Music On Hold presence"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(we_BusinessDetailsPage.extensionRange,
					"Check for Extension Range presence"));
			Assert.assertTrue(
					vc.getWebDriverUtils().elementAvailablity(we_BusinessDetailsPage.telephoneUserDirectorySearch,
							"Check for Telephone User Directory Search presence"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(we_BusinessDetailsPage.parkLocationMethod,
					"Check for Park Location Method presence"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(we_BusinessDetailsPage.emergencyEmail,
					"Check for Emergency Email presence"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(we_BusinessDetailsPage.businessHrs,
					"Check for Business Hrs presence"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}
		try {
			Reporter.log("109620 Verify set “Default ringtone” functionality", true);
			vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_BusinessDetailsPage.internalCallDirectDropdown,
					"Internal Call Dropdown", "Ring Tone 1");
			vc.getWebDriverUtils().clickElement(we_BusinessDetailsPage.ringtoneSubmit, "Click Save");
			Assert.assertTrue(vc.waitUntilTextIsPresent("New ringtone settings applied successfully"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Business Details"));
			vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_BusinessDetailsPage.externalCallDirectDropdown,
					"External Call Dropdown", "Ring Tone 1");
			vc.getWebDriverUtils().clickElement(we_BusinessDetailsPage.ringtoneSubmit, "Click Save");
			Assert.assertTrue(vc.waitUntilTextIsPresent("New ringtone settings applied successfully"));
			vc.waitUntilTextIsPresent("abcdtest");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Business Details"));
			vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_BusinessDetailsPage.internalCallGroupDropdown,
					"Internal Call Group Dropdown", "Ring Tone 1");
			vc.getWebDriverUtils().clickElement(we_BusinessDetailsPage.ringtoneSubmit, "Click Save");
			Assert.assertTrue(vc.waitUntilTextIsPresent("New ringtone settings applied successfully"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Business Details"));
			vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_BusinessDetailsPage.externalCallGroupDropdown,
					"External Call Group Dropdown", "Ring Tone 1");
			vc.getWebDriverUtils().clickElement(we_BusinessDetailsPage.ringtoneSubmit, "Click Save");
			Assert.assertTrue(vc.waitUntilTextIsPresent("New ringtone settings applied successfully"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Business Details"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("109619 Validate “Default ringtone” drop-down values", true);
			we_BusinessDetailsPage.internalCallDirectVerifyDropdownValues();
			we_BusinessDetailsPage.externalCallDirectVerifyDropdownValues();
			we_BusinessDetailsPage.internalCallGroupVerifyDropdownValues();
			we_BusinessDetailsPage.externalCallGroupVerifyDropdownValues();
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log(
					"109628 Verify default Account codes functionality & 109629 Check whether Account codes functionality can be enabled",
					true);
			vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_BusinessDetailsPage.accountCodesStatus,
					"Account codes Dropdown", "Disable");
			vc.getWebDriverUtils().clickElement(we_BusinessDetailsPage.accountCodeSubmit, "Click Submit");
			Assert.assertTrue(vc.waitUntilTextIsPresent("New account code settings applied successfully"));
			vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_BusinessDetailsPage.accountCodesStatus,
					"Account codes Dropdown", "Enable");
			vc.getWebDriverUtils().enterText(we_BusinessDetailsPage.minAccountLength, "2",
					"Enter minimum account length");
			vc.getWebDriverUtils().enterText(we_BusinessDetailsPage.maxAccountLength, "21",
					"Enter maximum account length");
			vc.getWebDriverUtils().clickElement(we_BusinessDetailsPage.accountCodeSubmit, "Click Submit");
			Assert.assertTrue(vc.waitUntilTextIsPresent("New account code settings applied successfully"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("109621 Validate “Music on Hold” drop-down values", true);
			we_BusinessDetailsPage.musicOnHoldVerifyDropdownValues();
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("109631 Check whether Extension range information are displayed", true);
			Assert.assertTrue(vc.waitUntilTextIsPresent("Phone Extension"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("100"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("599"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Call Group"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("600"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("699"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Auto Attendant"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("700"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("799"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("109632 Validate Telephone user directory search feature", true);
			vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_BusinessDetailsPage.telephoneUserDirectory,
					"Telephone User Directory Dropdown", "Classic");
			vc.getWebDriverUtils().clickElement(we_BusinessDetailsPage.telephoneSubmit, "Click submit");
			Assert.assertTrue(
					vc.waitUntilTextIsPresent("New telephone user directory search settings applied successfully"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("109633 Validate Park location method feature", true);
			vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_BusinessDetailsPage.parkLocationSelection,
					"Park Location Dropdown", "Lowest Available");
			vc.getWebDriverUtils().clickElement(we_BusinessDetailsPage.locationSubmit, "Click submit");
			Assert.assertTrue(vc.waitUntilTextIsPresent("New park location method settings applied successfully"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("109630 Verify Business hours functionality in Business details page", true);
			vc.getWebDriverUtils().clickElement(we_BusinessDetailsPage.configureBusinessHours, "Click Configure");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Business Hours"));
			we_BusinessDetailsPage.verifyPageURL();
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("109635 Verify Emergency contact emails functionality", true);
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.officeSuite, "Office Suite");
			vc.getWebDriverUtils().clickSubMenuOption("Business Details");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Business Details"));
			vc.getWebDriverUtils().clickElement(we_BusinessDetailsPage.addEmail, "Click add email");
			vc.getWebDriverUtils().enterText(we_BusinessDetailsPage.email, "testemail@windstream.com",
					"Enter email address");
			vc.getWebDriverUtils().clickElement(we_BusinessDetailsPage.emailcheck, "Click check icon");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Emergency Contact added successfully"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("testemail@windstream.com"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("109636 Check whether user able to edit & delete added emergency contact emails", true);
			String email = we_BusinessDetailsPage.emergencyContact.getText();
			we_BusinessDetailsPage.deleteEmail();
			vc.getWebDriverUtils().clickElement(we_BusinessDetailsPage.deleteConfirmation, "Confirm delete");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Emergency Contact deleted successfully"));
			String email1 = we_BusinessDetailsPage.emergencyContact.getText();
			boolean same = email.equals(email1);
			Assert.assertEquals(false, same);

			String email2 = we_BusinessDetailsPage.emergencyContact.getText();
			vc.getWebDriverUtils().clickElement(we_BusinessDetailsPage.emergencyContactEdit, "Click edit");
			vc.getWebDriverUtils().enterText(we_BusinessDetailsPage.email, "testemailadr@windstream.com",
					"Enter email address");
			vc.getWebDriverUtils().clickElement(we_BusinessDetailsPage.emailcheck, "Click check icon");
			String email3 = we_BusinessDetailsPage.emergencyContact.getText();
			boolean same1 = email2.equals(email3);
			Assert.assertEquals(false, same1);
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);

		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

	}

	// **************** Call Permission Profiles Test Scripts Starts Here
	// *****************//

	@Test
	public void Services_Products_OfficeSuite_CallPermissionProfile() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.BVN_User);
		userStoryDescription = "Services-> Products -> OfficeSuite -> Call Permission Profiles";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();

		try {
			Reporter.log(
					"109768 Check whether Call permission profile option available under Services -> Products, 109769 Verify whether Call permission profile page appears on clicking Call permission profile option and also validate the page ",
					true);
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
					"Services-> Products -> OfficeSuite -> Business details");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.officeSuite, "Office Suite");
			vc.getWebDriverUtils().clickSubMenuOption("Call Permission Profiles");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Call Permission Profiles"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);

		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}
		try {
			Reporter.log("109770 Validate create Call Permission Profile page", true);
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.createNewProfile,
					"Click create new profile");
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_CallPermissionProfilesPage.profileName,
					"Check for profile name text field"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_CallPermissionProfilesPage.callType,
					"Check for Call Type field"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_CallPermissionProfilesPage.emergency,
					"Check for Emergency field"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_CallPermissionProfilesPage.internal,
					"Check for Internal field"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_CallPermissionProfilesPage.international,
					"Check for International field"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_CallPermissionProfilesPage.local,
					"Check for Local field"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_CallPermissionProfilesPage.longDistance,
					"Check for Long Distance field"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_CallPermissionProfilesPage.operatorAssisted,
					"Check for Operator Assisted field"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_CallPermissionProfilesPage.regional,
					"Check for Regional field"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_CallPermissionProfilesPage.tollFree,
					"Check for Toll Free field"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_CallPermissionProfilesPage.tollPremium,
					"Check for Toll Premium field"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_CallPermissionProfilesPage.redirectInbound,
					"Check for Redirect Inbound Call to External Number field"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Members of this Profile"));
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Single clicking an entry will move it from left to right and right to left"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(
					We_CallPermissionProfilesPage.createProfileSubmit, "Check for submit button in create profile"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);

		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("109772 Verify create new profile functionality", true);
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.cancel, "Click cancel");
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.createNewProfile,
					"Click create new profile");
			vc.getWebDriverUtils().enterText(We_CallPermissionProfilesPage.profileName, "Testprofilepo3",
					"Enter profile name");
			vc.getWebDriverUtils().selectCheckbox(We_CallPermissionProfilesPage.checkBoxInternationalAll,
					"Check selectall in International");
			vc.getWebDriverUtils().selectCheckbox(We_CallPermissionProfilesPage.checkBoxLocal,
					"Check open hours in Local");
			vc.getWebDriverUtils().highLightAndClickMethod(We_CallPermissionProfilesPage.clickUser);
			action = new Actions(driver);
			action.doubleClick(We_CallPermissionProfilesPage.clickUser).perform();
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.createProfileSubmit, "Click submit");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Profile is created successfully"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("123406 Verify filtering functionality in call permission profile", true);
			if (vc.getWebDriverUtils().elementAvailablity(We_CallPermissionProfilesPage.filterOpen, "Filter Open")) {
				vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.filterOpen, "Filter Open");
			}
			Assert.assertTrue(vc.waitUntilTextIsPresent("Profile Name"));
			vc.getWebDriverUtils().enterText(We_CallPermissionProfilesPage.profileNameSearch, "Testprofilepo3",
					"Search Profile Name");
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.applyFilters, "Apply Filters");
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.filterOpen, "Filter Open");
			Assert.assertTrue(
					vc.getWebDriverUtils()
							.getText(We_CallPermissionProfilesPage.firstRecordCallPermissionProfile,
									"Call Permission Profile Search")
							.trim().equals("Testprofilepo3"),
					"Profile Validation in grid");
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("109778 Verify edit functionality with newly created call permission profiles", true);
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.editProfile, "Click edit");
			vc.getWebDriverUtils().selectCheckbox(We_CallPermissionProfilesPage.checkBoxRegional,
					"Do changes by enabling regional checkbox");
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.editProfileSubmit, "Click submit");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Profile edited successfully"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log(
					"109773 Check whether an user not allowed to create a profile by leaving profile name field blank",
					true);
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.createNewProfile,
					"Click create new profile");
			vc.getWebDriverUtils().selectCheckbox(We_CallPermissionProfilesPage.checkBoxInternationalAll,
					"Check selectall in International");
			vc.getWebDriverUtils().selectCheckbox(We_CallPermissionProfilesPage.checkBoxLocal,
					"Check open hours in Local");
			vc.getWebDriverUtils().highLightAndClickMethod(We_CallPermissionProfilesPage.clickUser);
			action = new Actions(driver);
			action.doubleClick(We_CallPermissionProfilesPage.clickUser).perform();
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.createProfileSubmit, "Click submit");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter name of the call permission"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}

		try {
			Reporter.log("109774 Validate the close functionality in create call permission profile page", true);
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.closeUser, "Click close");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Call Permission Profiles"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}

		try {
			Reporter.log("109775 Check whether an user able to add multiple extensions in a call permission profile",
					true);
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.createNewProfile,
					"Click create new profile");
			vc.getWebDriverUtils().enterText(We_CallPermissionProfilesPage.profileName, "Testprofilepo3",
					"Enter profile name");
			vc.getWebDriverUtils().selectCheckbox(We_CallPermissionProfilesPage.checkBoxInternationalAll,
					"Check selectall in International");
			vc.getWebDriverUtils().selectCheckbox(We_CallPermissionProfilesPage.checkBoxLocal,
					"Check open hours in Local");
			vc.getWebDriverUtils().highLightAndClickMethod(We_CallPermissionProfilesPage.clickUser);
			action = new Actions(driver);
			action.doubleClick(We_CallPermissionProfilesPage.clickUser).perform();
			vc.getWebDriverUtils().highLightAndClickMethod(We_CallPermissionProfilesPage.clickUser);
			action = new Actions(driver);
			action.doubleClick(We_CallPermissionProfilesPage.clickUser).perform();
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.createProfileSubmit, "Click submit");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Profile is created successfully"));
			if (vc.getWebDriverUtils().elementAvailablity(We_CallPermissionProfilesPage.filterOpen, "Filter Open")) {
				vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.filterOpen, "Filter Open");
			}
			Assert.assertTrue(vc.waitUntilTextIsPresent("Profile Name"));
			vc.getWebDriverUtils().enterText(We_CallPermissionProfilesPage.profileNameSearch, "Testprofilepo3",
					"Search Profile Name");
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.applyFilters, "Apply Filters");
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.filterOpen, "Filter Open");
			Assert.assertTrue(
					vc.getWebDriverUtils()
							.getText(We_CallPermissionProfilesPage.firstRecordCallPermissionProfile,
									"Call Permission Profile Search")
							.trim().equals("Testprofilepo3"),
					"Profile Validation in grid");
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.deleteProfile,
					"Delete Call Permission Profile");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Are you sure you want to delete this profile?"));
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.deleteProfileOk,
					"Delete Call Permission Profile - Ok");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Profile is deleted successfully"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}

		try {
			Reporter.log(
					"109776 Verify whether user able to deselect the selected members in create call permission profile",
					true);
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.createNewProfile,
					"Click create new profile");
			vc.getWebDriverUtils().enterText(We_CallPermissionProfilesPage.profileName, "Testprofilepo3",
					"Enter profile name");
			vc.getWebDriverUtils().enterText(We_CallPermissionProfilesPage.availableExtensionSearch, "test",
					"Available Users Search");
			vc.getWebDriverUtils().highLightAndClickMethod(We_CallPermissionProfilesPage.clickUser);
			action = new Actions(driver);
			action.doubleClick(We_CallPermissionProfilesPage.clickUser).perform();
			vc.getWebDriverUtils().enterText(We_CallPermissionProfilesPage.selectedExtensionSearch, "test",
					"Selected Users Search");
			vc.getWebDriverUtils().highLightAndClickMethod(We_CallPermissionProfilesPage.deselectUser);
			action = new Actions(driver);
			action.doubleClick(We_CallPermissionProfilesPage.deselectUser).perform();
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.closeUser, "Click close");
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		try {
			Reporter.log("109779 Verify delete functionality in call permission profiles", true);
			if (vc.getWebDriverUtils().elementAvailablity(We_CallPermissionProfilesPage.filterOpen, "Filter Open")) {
				vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.filterOpen, "Filter Open");
			}
			Assert.assertTrue(vc.waitUntilTextIsPresent("Profile Name"));
			vc.getWebDriverUtils().enterText(We_CallPermissionProfilesPage.profileNameSearch, "Testprofilepo3",
					"Search Profile Name");
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.applyFilters, "Apply Filters");
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.filterOpen, "Filter Open");
			Assert.assertTrue(
					vc.getWebDriverUtils()
							.getText(We_CallPermissionProfilesPage.firstRecordCallPermissionProfile,
									"Call Permission Profile Search")
							.trim().equals("Testprofilepo3"),
					"Profile Validation in grid");
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.deleteProfile,
					"Delete Call Permission Profile");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Are you sure you want to delete this profile?"));
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.deleteProfileOk,
					"Delete Call Permission Profile - Ok");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Profile is deleted successfully"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("109780 Verify close and cancel options in delete functionality", true);
			driver.navigate().refresh();
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.deleteProfile,
					"Delete Business Hours Profile");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Are you sure you want to delete this profile?"));
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.deleteProfileCancel,
					"Delete Call Permission Profile - Cancel");
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.deleteProfile,
					"Delete Call Permission Profile");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Are you sure you want to delete this profile?"));
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.close,
					"Delete Call Permission Profile - close");
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}

		try {
			Reporter.log("109777 Verify clone functionality with newly created call permission profiles", true);
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.cloneProfile, "Click clone");
			vc.getWebDriverUtils().enterText(We_CallPermissionProfilesPage.editProfileName, "Testprofilepo3",
					"Enter profile name");
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.editProfileSubmit, "Click submit");
			vc.waitUntilTextIsPresent("Profile cloned successfully");
			if (vc.getWebDriverUtils().elementAvailablity(We_CallPermissionProfilesPage.filterOpen, "Filter Open")) {
				vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.filterOpen, "Filter Open");
			}
			Assert.assertTrue(vc.waitUntilTextIsPresent("Profile Name"));
			vc.getWebDriverUtils().enterText(We_CallPermissionProfilesPage.profileNameSearch, "Testprofilepo3",
					"Search Profile Name");
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.applyFilters, "Apply Filters");
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.filterOpen, "Filter Open");
			Assert.assertTrue(
					vc.getWebDriverUtils()
							.getText(We_CallPermissionProfilesPage.firstRecordCallPermissionProfile,
									"Call Permission Profile Search")
							.trim().equals("Testprofilepo3"),
					"Profile Validation in grid");
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.deleteProfile,
					"Delete Call Permission Profile");
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.deleteProfileOk,
					"Delete Call Permission Profile - Ok");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Profile is deleted successfully"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");

		}

		try {
			Reporter.log("109771 Check whether help text displays on doing mouse over on call types", true);
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.createNewProfile,
					"Click create new profile");
			Actions builder = new Actions(driver);
			builder.moveToElement(We_CallPermissionProfilesPage.toolTipEmergency).build().perform();
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Calls to the number used to report an emergency. In North America, this number is 911. This permission is active for all users at all times."));
			builder.moveToElement(We_CallPermissionProfilesPage.toolTipInternal).build().perform();
			Assert.assertTrue(vc.waitUntilTextIsPresent("Calls to another extension within the same business."));
			builder.moveToElement(We_CallPermissionProfilesPage.toolTipInternational).build().perform();
			Assert.assertTrue(vc.waitUntilTextIsPresent("International calls to which long distance charges apply."));
			builder.moveToElement(We_CallPermissionProfilesPage.toolTipLocal).build().perform();
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Calls within the local calling area of your business. No long distance charges apply"));
			builder.moveToElement(We_CallPermissionProfilesPage.toolTipLongdistance).build().perform();
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Calls outside the local calling area of your business and outside of your region. Long-distance charges apply."));
			builder.moveToElement(We_CallPermissionProfilesPage.toolTipOperatorAssigned).build().perform();
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Calls in which the operator is involved, typically resulting in long distance charges."));
			builder.moveToElement(We_CallPermissionProfilesPage.toolTipRegional).build().perform();
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Calls outside the local calling area of your business and within your region. Long-distance charges apply."));
			vc.scrollToView(We_CallPermissionProfilesPage.toolTipTollFree);
			builder.moveToElement(We_CallPermissionProfilesPage.toolTipTollFree).build().perform();
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Long-distance calls to which no charges apply. Typically, these numbers begin with 1-800."));
			vc.scrollToView(We_CallPermissionProfilesPage.toolTipTollFreePremium);
			builder.moveToElement(We_CallPermissionProfilesPage.toolTipTollFreePremium).build().perform();
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Calls to a toll number to which charges apply. Typically, these numbers begin with 1-900."));
			builder.moveToElement(We_CallPermissionProfilesPage.toolTipTollRedirectInbound).build().perform();
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Allow call coverage, n-way calls, transfer or forward of external calls to an external phone number. Prerequisite: permission to make the external call itself."));
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.cancel, "Click cancel");
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}

		try {
			Reporter.log(
					"109781 Check whether default system profiles are displayed in the call permission profile list",
					true);
			We_CallPermissionProfilesPage.defaultprofile("Standard");
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}

		try {
			Reporter.log(
					"109782 Check whether user able to assign or unassign extensions to the default system profiles but can’t change/delete",
					true);
			if (vc.getWebDriverUtils().elementAvailablity(We_CallPermissionProfilesPage.filterOpen, "Filter Open")) {
				vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.filterOpen, "Filter Open");
			}
			Assert.assertTrue(vc.waitUntilTextIsPresent("Profile Name"));
			vc.getWebDriverUtils().enterText(We_CallPermissionProfilesPage.profileNameSearch, "Standard",
					"Search Profile Name");
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.applyFilters, "Apply Filters");
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.filterOpen, "Filter Open");
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.editProfile, "Click edit");
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"This is a system profile. You can assign or unassign extensions to this profile, but cannot change or delete it."));
			Assert.assertFalse(We_CallPermissionProfilesPage.callPermissionProfileCheckbox.isEnabled());
			Assert.assertFalse(We_CallPermissionProfilesPage.callPermissionProfileCheckbox1.isEnabled());
			Assert.assertFalse(We_CallPermissionProfilesPage.callPermissionProfileCheckbox1.isEnabled());
			vc.getWebDriverUtils().highLightAndClickMethod(We_CallPermissionProfilesPage.editClickUser);
			action = new Actions(driver);
			action.doubleClick(We_CallPermissionProfilesPage.editClickUser).perform();
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.editProfileSubmit, "Click submit");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Profile edited successfully"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}

		try {
			Reporter.log("109783 Verify clone functionality with default system profiles", true);
			if (vc.getWebDriverUtils().elementAvailablity(We_CallPermissionProfilesPage.filterOpen, "Filter Open")) {
				vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.filterOpen, "Filter Open");
			}
			Assert.assertTrue(vc.waitUntilTextIsPresent("Profile Name"));
			vc.getWebDriverUtils().enterText(We_CallPermissionProfilesPage.profileNameSearch, "Standard",
					"Search Profile Name");
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.applyFilters, "Apply Filters");
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.filterOpen, "Filter Open");
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.cloneProfile, "Click clone");
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"This is a system profile. You can assign or unassign extensions to this profile, but cannot change or delete it."));
			Assert.assertFalse(We_CallPermissionProfilesPage.callPermissionProfileCheckbox.isEnabled());
			Assert.assertFalse(We_CallPermissionProfilesPage.callPermissionProfileCheckbox1.isEnabled());
			Assert.assertFalse(We_CallPermissionProfilesPage.callPermissionProfileCheckbox1.isEnabled());
			vc.getWebDriverUtils().highLightAndClickMethod(We_CallPermissionProfilesPage.editClickUser);
			action = new Actions(driver);
			action.doubleClick(We_CallPermissionProfilesPage.editClickUser).perform();
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.editProfileSubmit, "Click submit");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Profile edited successfully"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}

		try {
			Reporter.log("109784 Verify whether delete option not available for default system profiles", true);
			if (vc.getWebDriverUtils().elementAvailablity(We_CallPermissionProfilesPage.filterOpen, "Filter Open")) {
				vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.filterOpen, "Filter Open");
			}
			Assert.assertTrue(vc.waitUntilTextIsPresent("Profile Name"));
			vc.getWebDriverUtils().enterText(We_CallPermissionProfilesPage.profileNameSearch, "Standard",
					"Search Profile Name");
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.applyFilters, "Apply Filters");
			vc.getWebDriverUtils().clickElement(We_CallPermissionProfilesPage.filterOpen, "Filter Open");
			// Assert.assertFalse(We_CallPermissionProfilesPage.callPermissionProfileCheckbox1.isEnabled());
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}

		try {
			Reporter.log("123476 Verify pagination functionality in call permission profile", true);
			We_CallPermissionProfilesPage.verifyPagination();
			driver.navigate().refresh();
			We_CallPermissionProfilesPage.verifyforward();
			We_CallPermissionProfilesPage.verifyBackward();
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
	}

	// **************** My call handling Test Scripts Starts Here
	// *****************//

	@Test
	public void Services_MyCallHandling() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.BVN_User);
		userStoryDescription = "Services-> My Services -> My Call Handling";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();

		try {
			Reporter.log("122776 Verify My Call Handling Screen UI", true);
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
					"Services-> My Services -> My Call Handling");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.MyServices, "My Services");
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.myCallHandling, "My Call Handling");
			// To close the pendo note
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.pendoClose,
					"Check No call forwarding in call forwarding");

			Assert.assertTrue(vc.waitUntilTextIsPresent("My Call Handling"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_MyCallHandlingPage.callForwardingHeader,
					"Check for Call Forwarding-Immediate presence"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_MyCallHandlingPage.doNotDisturbHeader,
					"Check for Do Not Disturb presence"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_MyCallHandlingPage.callWaitingToneHeader,
					"Check for Call Waiting Tone presence"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_MyCallHandlingPage.callTwinningHeader,
					"Check for Call Twinning presence"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(
					We_MyCallHandlingPage.callForwardingNoAnswerHeader, "Check for Call Forwarding-NoAnswer presence"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);

		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log(
					"122778 Verify the functionality of Configure call handling for which extension? Dropdown & 122779 Verify the functionality of Extension number change",
					true);
			vc.getWebDriverUtils().genericDropDownSelectFirstItem(We_MyCallHandlingPage.extensionDropdown,
					"Extension dropdown");
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("122780 Verify Call Forwarding (Immediate) Menu UI", true);
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_MyCallHandlingPage.callForwardingNoneSelect,
					"Check for Call Forwarding -> None field presence"));
			Assert.assertTrue(
					vc.getWebDriverUtils().elementAvailablity(We_MyCallHandlingPage.callForwardingAnotherPhone,
							"Check for Call Forwarding -> Another phone field presence"));
			Assert.assertTrue(
					vc.getWebDriverUtils().elementAvailablity(We_MyCallHandlingPage.callForwardingAutoAttendant,
							"Check for Call Forwarding -> Auto Attendant field presence"));
			Assert.assertTrue(
					vc.getWebDriverUtils().elementAvailablity(We_MyCallHandlingPage.callForwardingCallCoverage,
							"Check for Call Forwarding -> Call coverage field presence"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);

		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("122781 Verify the functionality of  Save Call Forwarding(Immediate) Button", true);
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callForwardingNoneSelect,
					"Check none in Call forwarding (Immediate)");
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callForwardingSubmit,
					"Click submit in My call handling");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Updated Call Forwarding Settings"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);

		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("122812 Verify 'Call coverage' Functionality in Call Forwarding (Immediate)", true);
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callForwardingCallCoverage,
					"Select Call Coverage");
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callForwardingSubmit,
					"Click submit in My call handling");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Updated Call Forwarding Settings"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);

		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}
		try {
			Reporter.log("122784 Verify the Functionality of Auto Attendant in Call Forwarding(Immediate)", true);
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callForwardingAutoAttendant,
					"Select Auto Attendant");
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callForwardingSubmit,
					"Click submit in My call handling");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Updated Call Forwarding Settings"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);

		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("122786 Verify 'Another Phone' sub menu UI in Call Forwarding(Immediate)", true);
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callForwardingAnotherPhone,
					"Select Another phone");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Extension/Call Group/CCS Extension"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Phone Number"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);

		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}
		try {
			Reporter.log(
					"122790 Verify the functionality of radio buttons in 'Another phone' option in Call Forwarding(Immediate)",
					true);
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callForwardingAnotherPhone,
					"Select Another phone radio button");
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callForwardingPhoneNumberSelect,
					"Select Phonenumber");
			We_MyCallHandlingPage.extensionDisableStatus();
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_MyCallHandlingPage.immediatePhoneNumber,
					"Extension/Call Group/CCS Extension drop-down"));
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callForwardingImmediateExt,
					"Select Extension/Call Group/CCS Extension radio button");
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_MyCallHandlingPage.callForwardingExtEnable,
					"Extension/Call Group/CCS Extension drop-down"));
			We_MyCallHandlingPage.phonenofielddisablestatus();
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log(
					"122787 Verify the functionality of 'Extension / CallGroup /CSS Extension' in Call Forwarding(Immediate) ",
					true);
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callForwardingAnotherPhone,
					"Select Another phone");
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callForwardingImmediateExt,
					"Select Extension/Call Group/CCS Extension");
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callForwardingSubmit,
					"Click submit in My call handling");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Updated Call Forwarding Settings"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);

		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}
		try {
			Reporter.log(
					"122789 Verify the functionality of call forwarding(Immediate) with Blank and Invalid phone number",
					true);
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callForwardingAnotherPhone,
					"Select Another phone");
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callForwardingPhoneNumberSelect,
					"Select Phonenumber");
			vc.getWebDriverUtils().enterText(We_MyCallHandlingPage.immediatePhoneNumber, "", "Phone number");
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callForwardingSubmit,
					"Click submit in My call handling");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter valid inputs"));
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.warningClose, "Click close in error floating");
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);

		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("122788 Verify the functionality of call forwarding(Immediate) with valid phone number", true);
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callForwardingAnotherPhone,
					"Select Another phone");
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callForwardingPhoneNumberSelect,
					"Select Phonenumber");
			vc.getWebDriverUtils().enterText(We_MyCallHandlingPage.immediatePhoneNumber, "1234567890",
					"Enter phone number");
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callForwardingSubmit,
					"Click submit in My call handling");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Updated Call Forwarding Settings"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);

		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("122791 Verify 'Do not Distrub' UI", true);
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_MyCallHandlingPage.doNotDisturb,
					"Check for Call Forwarding -> Do Not Disturb checkbox presence"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_MyCallHandlingPage.saveDoNotDisturb,
					"Check for Call Forwarding -> Do Not Disturb save button presence"));
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"When enabled, calls to this extension will receive a busy signal or, if Call Forwarding is enabled, calls will be forwarded."));

			Reporter.log("122793 Verify the functionality of 'Do not Disturb' - Disable", true);
			vc.getWebDriverUtils().unSelectCheckbox(We_MyCallHandlingPage.checkBoxDoNotDisturb,
					"Uncheck Do Not Disturb");
			vc.scrollToView(We_MyCallHandlingPage.saveDoNotDisturb);
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.saveDoNotDisturb, "Click save in Do Not Disturb");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Updated Do not Disturb settings"));
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.warningClose,
					"Click close in Call Twinning validation window");

			Reporter.log("122792 Verify the functionality of 'Do not Disturb'- Enable ", true);
			vc.getWebDriverUtils().selectCheckbox(We_MyCallHandlingPage.checkBoxDoNotDisturb, "Check Do Not Disturb");
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.saveDoNotDisturb, "Click save in Do Not Disturb");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Updated Do not Disturb settings"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);

		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("122794 Verify 'Call Waiting Tone' UI", true);
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"When enabled, a call waiting tone will be played when there is a new incoming call for a user who is already on a call."));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_MyCallHandlingPage.callWaitingToneCheckbox,
					"Check for Call Forwarding -> Call waiting enable/disable field presence"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_MyCallHandlingPage.callWaitingToneSave,
					"Check for Call Forwarding -> Call waiting save field presence"));

			Reporter.log("122797 Verify the functionality of 'Save Call Waiting' (OFF) state", true);
			vc.getWebDriverUtils().unSelectCheckbox(We_MyCallHandlingPage.callWaitingToneCheckbox,
					"Uncheck Twinning checkbox");
			vc.scrollToView(We_MyCallHandlingPage.callWaitingToneSave);
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callWaitingToneSave,
					"Click save in Call waiting");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Updated Call Waiting tone Settings."));
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.warningClose,
					"Click close in Call Twinning validation window");

			Reporter.log("122796 Verify the functionality of 'Save Call Waiting' (ON) state", true);
			vc.getWebDriverUtils().selectCheckbox(We_MyCallHandlingPage.callWaitingToneCheckbox,
					"Enable Twinning checkbox");
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callWaitingToneSave,
					"Click save in Call Twinning");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Updated Call Waiting tone Settings."));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);

		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("122804 Verify Call Twinning (UI)", true);
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Call Twinning rings another phone number of your choice whenever this extension is called."));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_MyCallHandlingPage.callTwinning,
					"Check for Call Forwarding -> Call twinning enable/disable field presence"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_MyCallHandlingPage.callTwinningSave,
					"Check for Call Forwarding -> Call twinning save field presence"));

			Reporter.log("122806 Verify the functionality of Call Twinning in OFF state", true);
			vc.scrollDown();
			vc.getWebDriverUtils().unSelectCheckbox(We_MyCallHandlingPage.callTwinningCheckbox,
					"Uncheck Twinning checkbox");
			vc.scrollToView(We_MyCallHandlingPage.callTwinningSave);
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callTwinningSave, "Click save in Call Twinning");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Updated Call Twinning Settings."));
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.warningClose,
					"Click close in Call Twinning validation window");

			Reporter.log(
					"122805 Verify the functionality of Call Twinning in ON mode & 122807 Verify the functionality of Call Twinning in ON state with Valid phone number & 122808 Verify the functionality of Call Twinning in ON state with  blank/invalid inputs",
					true);
			vc.getWebDriverUtils().selectCheckbox(We_MyCallHandlingPage.callTwinningCheckbox,
					"Check Twinning checkbox");
			vc.getWebDriverUtils().enterText(We_MyCallHandlingPage.callTwinningInput, "",
					"Remove available phone number");
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callTwinningSave, "Click save in Call Twinning");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter valid inputs."));
			driver.navigate().refresh();
			vc.getWebDriverUtils().selectCheckbox(We_MyCallHandlingPage.callTwinningCheckbox,
					"Check Twinning checkbox");
			vc.getWebDriverUtils().enterText(We_MyCallHandlingPage.callTwinningInput, "1234567890",
					"Enter phone number");
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_MyCallHandlingPage.callTwinningInput,
					"Call Twinning input field should display when twinning is enabled"));
			vc.scrollToView(We_MyCallHandlingPage.callTwinningSave);
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callTwinningSave, "Click save in Call Twinning");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Updated Call Twinning Settings."));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);

		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log(
					"122798 Verify No call Forwarding functionality under Call Forwarding (No answer call coverage)",
					true);
			vc.scrollUp();
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.noCallForwarding,
					"Check No call forwarding in call forwarding");
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.saveCallCoverage,
					"Click save in call forwarding");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Updated Call Coverage Settings."));
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.warningClose, "Click close in error floating");
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("126215 Verify the functionality of call forwarding with voicemail", true);
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.voicemailCallForwarding,
					"Click voicemail in call forwarding");
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.saveCallCoverage,
					"Click save in call forwarding");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Updated Call Coverage Settings."));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log(
					"122810 Verify 'Auto Attendant' sub menu UI & 122811 Verify the functionality of call forwarding with Auto Attendant",
					true);
			We_MyCallHandlingPage.autoattendant();
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_MyCallHandlingPage.autoAttendantExt,
					"Check for Extension dropdown after selecting auto attendant "));
			vc.scrollToView(We_MyCallHandlingPage.saveCallCoverage);
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.saveCallCoverage,
					"Click save in call forwarding");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Updated Call Coverage Settings."));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log(
					"122803 Verify the functionality of radio buttons in 'Another phone' option. - Call Forwarding (No answer Coverage)",
					true);
			vc.scrollUp();
			We_MyCallHandlingPage.anotherphone();
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callForwardingExtension,
					"Click Extension/Call group/CCS Extension in call forwarding");
			We_MyCallHandlingPage.verifyphonenodisablestatus();
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_MyCallHandlingPage.callCoverageExtension,
					"Check Extension/CCS Extension/Call groups enable state"));
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.anotherPhoneNumber,
					"Click another phone number in call forwarding");
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_MyCallHandlingPage.anotherPhoneNumber,
					"Check Another Phone number enable state"));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log(
					"122799 Verify the Functionality of Call forwarding to Another Phone with Ring count enabled & 122800 Verify the functionality of 'Extension / CallGroup /CSS Extension' - Call Forwarding (No answer Coverage)",
					true);
			vc.scrollUp();
			We_MyCallHandlingPage.anotherphone();
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.callForwardingExtension,
					"Click Extension/Call group/CCS Extension in call forwarding");
			vc.scrollToView(We_MyCallHandlingPage.saveCallCoverage);
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.saveCallCoverage,
					"Click save in call forwarding");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Updated Call Coverage Settings."));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);

		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log(
					"122801 Verify the functionality of call forwarding with valid phone number - Call Forwarding (No answer Coverage)",
					true);
			We_MyCallHandlingPage.anotherphone();
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.anotherPhoneNumber,
					"Click another phone number in call forwarding");
			vc.getWebDriverUtils().enterText(We_MyCallHandlingPage.anotherPhoneNumberTextField, "1234567890",
					"Enter phone number");
			vc.scrollToView(We_MyCallHandlingPage.saveCallCoverage);
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.saveCallCoverage,
					"Click save in call forwarding");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Updated Call Coverage Settings."));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);

		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}
		try {
			Reporter.log(
					"122802 Verify the functionality of call forwarding with Blank and Invalid  phone number- Call Forwarding (No answer Coverage)",
					true);
			We_MyCallHandlingPage.anotherphone();
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.anotherPhoneNumber,
					"Click another phone number in call forwarding");
			vc.getWebDriverUtils().enterText(We_MyCallHandlingPage.anotherPhoneNumberTextField, "",
					"Remove available phone number");
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.saveCallCoverage,
					"Click save in call forwarding");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter valid inputs."));
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

	}

	//// **************** Phones and Accessories Test Scripts Starts Here
	// *****************//

	@Test
	public void Services_PhonesAndAccessories() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.BVN_User);
		userStoryDescription = "Services-> Products -> OfficeSuite -> Phones and Accessories";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();

		try {
			Reporter.log("118730 Check whether 'Phones and Accessories' option available under menu", true);
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
					"Services-> Products -> OfficeSuite -> Phones and Accessories");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.officeSuite, "Office Suite");
			vc.getWebDriverUtils().clickSubMenuOption("Phones and Accessories");
			// To close the pendo note
			vc.getWebDriverUtils().clickElement(We_MyCallHandlingPage.pendoClose, "Click close in pendo");

			Reporter.log("118733 Verify whether Buy phones and accessories page loads and also validate the page",
					true);
			Assert.assertTrue(vc.waitUntilTextIsPresent("Phones and Accessories"));
			Assert.assertTrue(vc.waitUntilTextIsPresent(
					"Each phone comes complete with an OfficeSuite extension and voicemail box."));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(
					We_PhonesAndAccessoriesPage.currentEquipmentHeader, "Check current equipment header availability"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_PhonesAndAccessoriesPage.lineOfProducts,
					"Check line of products button existance"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_PhonesAndAccessoriesPage.gridHeader1,
					"Check grid header for product"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_PhonesAndAccessoriesPage.gridHeader2,
					"Check grid header for Rent or Buy?"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_PhonesAndAccessoriesPage.gridHeader3,
					"Check grid header for Quantity"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_PhonesAndAccessoriesPage.gridHeader4,
					"Check grid header for Unit price"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_PhonesAndAccessoriesPage.gridHeader5,
					"Check grid header for One-Time"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_PhonesAndAccessoriesPage.gridHeader6,
					"Check grid header for Monthly"));
			Assert.assertTrue(
					vc.getWebDriverUtils().elementAvailablity(We_PhonesAndAccessoriesPage.addPhonesAndAccessories,
							"Check add phones and accessories button existance"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_PhonesAndAccessoriesPage.btnReviewOrder,
					"Check review button existance"));

		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("118734 Verify current equipment functionality in Buy phones and accessories", true);
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(
					We_PhonesAndAccessoriesPage.currentEquipmentHeader, "Check current equipment header availability"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_PhonesAndAccessoriesPage.productName,
					"Check product name"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_PhonesAndAccessoriesPage.productQuantity,
					"Check product quantity"));
			if (We_PhonesAndAccessoriesPage.getSize() > 0) {
				System.out.println("List of products available under current equipment");
			}

			Reporter.log("118735 Check whether 'view our line of products' is clickable in current equipment", true);
			vc.getWebDriverUtils().clickElement(We_PhonesAndAccessoriesPage.lineOfProducts,
					"Click Line of products button"); // click some link that opens a new window
			Set<String> allHandles = driver.getWindowHandles();
			for (String currentHandle : allHandles) {
				if (!currentHandle.equals(winHandleBefore)) {
					driver.switchTo().window(currentHandle);
					// Validation to do on new window
					Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(
							We_PhonesAndAccessoriesPage.headerIPPhoneSystems, "Check header in the new window"));
					Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(
							We_PhonesAndAccessoriesPage.headerPowerfulNetworks, "Check header in the new window"));
					Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(
							We_PhonesAndAccessoriesPage.productButton, "Check product button in the new window"));
					Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(
							We_PhonesAndAccessoriesPage.seeLiveDemoButton, "Check Live demo button in the new window"));
					driver.close(); // close newly opened window when done with it
					driver.switchTo().window(winHandleBefore); // switch back to the original window
				}
			}
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("118737 Check whether user able to add a phone or accessory", true);
			vc.getWebDriverUtils().genericDropDownSelectFirstItem(We_PhonesAndAccessoriesPage.product,
					"Choose product from the dropdown");
			vc.waitUntilTextIsPresent("Updated Call Coverage Settings.");

			Reporter.log("118743 Check whether review order window opens on clicking review order", true);
			vc.getWebDriverUtils().enterText(We_PhonesAndAccessoriesPage.txtAttentionTo, "TestQA",
					"Enter the attention to");
			vc.getWebDriverUtils().genericDropDownSelectFirstItem(We_PhonesAndAccessoriesPage.ddlShippingAddress,
					"Choose shipping address from the dropdown");
			vc.getWebDriverUtils().genericDropDownSelectFirstItem(We_PhonesAndAccessoriesPage.ddlBillingAddress,
					"Choose billing address from the dropdown");
			vc.getWebDriverUtils().clickElement(We_PhonesAndAccessoriesPage.btnReviewOrder,
					"Click review order button");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Review Order"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Product"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Total"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("ATTENTION TO"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Test"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("SHIPPING LOCATION"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("BILLING LOCATION"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("TestQA"));
			Assert.assertTrue(vc.waitUntilTextIsPresent(We_PhonesAndAccessoriesPage.getOneTimePrice()));
			Assert.assertTrue(vc.waitUntilTextIsPresent(We_PhonesAndAccessoriesPage.getMonthlyPrice()));

			Reporter.log("118748 Verify whether close works in review order pop-up", true);
			vc.getWebDriverUtils().clickElement(We_PhonesAndAccessoriesPage.reviewClose,
					"Click cancel in review order window");
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		// TODO Need to add validations after submit order - Bug 115746
		try {
			Reporter.log("118749 Verify whether an user able to submit the order - Buy phones and accessories", true);
			vc.getWebDriverUtils().clickElement(We_PhonesAndAccessoriesPage.btnSubmitOrder,
					"Click submit order button");
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("118738 Check whether user able to add multiple phones or accessories", true);
			vc.getWebDriverUtils().genericDropDownSelectFirstItem(We_PhonesAndAccessoriesPage.product,
					"Choose product from the dropdown");
			vc.waitUntilTextIsPresent("Updated Call Coverage Settings.");

			Reporter.log("118750 Check whether unit price changes based on the increase/decrease of the quantity",
					true);
			We_PhonesAndAccessoriesPage.verifyQtyOnetimePrice();
			We_PhonesAndAccessoriesPage.verifyQtyMonthlyPrice();
			We_PhonesAndAccessoriesPage.verifyOneTimePrice();
			We_PhonesAndAccessoriesPage.verifyMonthlyPrice();
			vc.getWebDriverUtils().clickElement(We_PhonesAndAccessoriesPage.addPhonesAndAccessories,
					"Click add phones and accessories");
			vc.waitUntilTextIsPresent("Updated Call Coverage Settings.");
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_PhonesAndAccessoriesPage.onetimeprice2nd,
					"Check one time price in second added product"));
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("118740 Check whether user able to delete the added phones or accessories", true);
			vc.getWebDriverUtils().clickElement(We_PhonesAndAccessoriesPage.clearUserSelection,
					"Click delete for the added phones and accesssories");
			vc.waitUntilTextIsPresent("Updated Call Coverage Settings.");
			Assert.assertFalse(vc.getWebDriverUtils().elementAvailablity(We_PhonesAndAccessoriesPage.qtyProduct1,
					"Check quantity in first added product"));
			Assert.assertFalse(vc.getWebDriverUtils().elementAvailablity(
					We_PhonesAndAccessoriesPage.onetimePriceProduct1, "Check one time price in first added product"));

		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("118751 Validate review order pop-up on update after close", true);
			vc.getWebDriverUtils().genericDropDownSelectFirstItem(We_PhonesAndAccessoriesPage.product,
					"Choose product from the dropdown");
			vc.waitUntilTextIsPresent("Updated Call Coverage Settings.");
			vc.getWebDriverUtils().enterText(We_PhonesAndAccessoriesPage.txtAttentionTo, "TestQA",
					"Enter the attention to");
			vc.getWebDriverUtils().genericDropDownSelectFirstItem(We_PhonesAndAccessoriesPage.ddlShippingAddress,
					"Choose shipping address from the dropdown");
			vc.getWebDriverUtils().genericDropDownSelectFirstItem(We_PhonesAndAccessoriesPage.ddlBillingAddress,
					"Choose billing address from the dropdown");
			vc.getWebDriverUtils().clickElement(We_PhonesAndAccessoriesPage.btnReviewOrder,
					"Click review order button");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Review Order"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("TestQA"));
			vc.getWebDriverUtils().clickElement(We_PhonesAndAccessoriesPage.reviewClose,
					"Click cancel in review order window");
			vc.getWebDriverUtils().genericDropDownSelectFirstItem(We_PhonesAndAccessoriesPage.product,
					"Choose product from the dropdown");
			vc.getWebDriverUtils().enterText(We_PhonesAndAccessoriesPage.txtAttentionTo, "Verificationaftercancel",
					"Enter the attention to");
			vc.getWebDriverUtils().genericDropDownSelectFirstItem(We_PhonesAndAccessoriesPage.ddlShippingAddress,
					"Choose shipping address from the dropdown");
			vc.getWebDriverUtils().genericDropDownSelectFirstItem(We_PhonesAndAccessoriesPage.ddlBillingAddress,
					"Choose billing address from the dropdown");
			vc.getWebDriverUtils().clickElement(We_PhonesAndAccessoriesPage.btnReviewOrder,
					"Click review order button");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Review Order"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Verificationaftercancel"));
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	// ---------------------------------------------------------------------------------------------
	// Extension Manager scripts starts here
	@Test
	public void Services_ExtensionManager() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.BVN_User);
		userStoryDescription = "Services-> Products -> OfficeSuite -> Extension Manager";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();

		try {
			Reporter.log("124279 Verify the 'Extension Manager' UI", true);
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
					"Services-> Products -> OfficeSuite -> Extension Manager");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.officeSuite, "Office Suite");
			vc.getWebDriverUtils().clickSubMenuOption("Extension Manager");

			Assert.assertTrue(vc.waitUntilTextIsPresent("Extension Manager"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_ExtensionManagerPage.assignExtensions,
					"Check for assign extensions availability"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_ExtensionManagerPage.extensionCreate,
					"Check for create extensions availability"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Extension"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Directory Listing"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("User"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Login"));

			Reporter.log("124450 Verify the functionality of 'Export' ", true);
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_ExtensionManagerPage.extensionExport,
					"Check for export availability"));

		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("124394 Verify the Add extension UI", true);
			vc.getWebDriverUtils().clickElement(We_ExtensionManagerPage.extensionCreate,
					"Click create in extension manager");
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_ExtensionManagerPage.extensionDropdown,
					"Check for extension field availability"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_ExtensionManagerPage.directoryFirstName,
					"Check for directory firstname field availability"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_ExtensionManagerPage.directoryLastName,
					"Check for directory lastname field availability"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(
					We_ExtensionManagerPage.ddlMYofficeSuiteUserName, "Check for officesuite username availability"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_ExtensionManagerPage.ddlIncomingPhoneNumber,
					"Check for Incoming phonenumber availability"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_ExtensionManagerPage.ddlOutgoingCallerId,
					"Check for outgoing caller id availability"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_ExtensionManagerPage.ddlExtensionTypeId,
					"Check for extension type id availability"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_ExtensionManagerPage.btnAddExtension,
					"Check for submit field existance"));
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("124449 Verify wether the user is able to create extension in add extension popup", true);
			vc.getWebDriverUtils().genericDropDownSelectFirstItem(We_ExtensionManagerPage.extensionDropdown,
					"Extension dropdown");
			String firstname = "test" + Math.random();
			vc.getWebDriverUtils().enterText(We_ExtensionManagerPage.directoryFirstName, firstname,
					"Enter directory firstname");
			vc.getWebDriverUtils().enterText(We_ExtensionManagerPage.directoryLastName, "user",
					"Enter directory secondname");
			vc.getWebDriverUtils().genericDropDownSelectFirstItem(We_ExtensionManagerPage.ddlMYofficeSuiteUserName,
					"Choose value from Officesuite username drop-down");
			vc.getWebDriverUtils().genericDropDownSelectFirstItem(We_ExtensionManagerPage.ddlIncomingPhoneNumber,
					"Choose value from Incoming phonenumber drop-down");
			vc.getWebDriverUtils().genericDropDownSelectFirstItem(We_ExtensionManagerPage.ddlOutgoingCallerId,
					"Choose value from outgoing caller id drop-down");
			vc.getWebDriverUtils().clickElement(We_ExtensionManagerPage.chkVoicemail,
					"Click voicemail in extension manager");
			vc.getWebDriverUtils().clickElement(We_ExtensionManagerPage.btnAddExtension,
					"Click voicemail in extension manager");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Successfully created extension."));

			Reporter.log("124454 Verify the Functionality of 'Search by' ", true);
			vc.getWebDriverUtils().enterText(We_ExtensionManagerPage.searchText, firstname,
					"Enter directory firstname in searchbox");
			Assert.assertTrue(vc.waitUntilTextIsPresent(firstname + ",user"));
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("124451 Verify the 'Assign Extensions' UI", true);
			Assert.assertTrue(vc.waitUntilTextIsPresent("Assign Extensions"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Click an extension to assign or un-assign it to this user."));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Match directory name for user owned extensions."));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_ExtensionManagerPage.searchUnassigned,
					"Check for unassigned search existance"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_ExtensionManagerPage.searchAssigned,
					"Check for assigned search existance"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_ExtensionManagerPage.assignExtensionsSave,
					"Check for save field existance"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(We_ExtensionManagerPage.assignExtensionsCancel,
					"Check for cancel field existance"));
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("124452 Verify whether the user is able to 'Assign Extensions' ", true);
			vc.getWebDriverUtils().clickElement(We_ExtensionManagerPage.assignExtensions,
					"Click assign extension in extension manager");
			vc.getWebDriverUtils().clickElement(We_ExtensionManagerPage.extensionSelect,
					"Click an extension to assign to it the user");
			vc.getWebDriverUtils().clickElement(We_ExtensionManagerPage.assignExtensionsSave,
					"Click save in assign extension");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Successfully changed allocations."));
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("124453 Verify whether the user is able to cancel the 'Assign Extensions' ", true);
			vc.getWebDriverUtils().clickElement(We_ExtensionManagerPage.assignExtensions,
					"Click assign extension in extension manager");
			vc.getWebDriverUtils().clickElement(We_ExtensionManagerPage.assignExtensionsCancel,
					"Click cancel in assign extension");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Extension Manager"));
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}
	// ---------------------------------------------------------------------------------------------
	// My call log scripts starts here

	@Test
	public void Services_MyCallLog() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.BVN_User);
		userStoryDescription = "Services-> My Services -> My Call Log";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();

		try {
			Reporter.log("129072 My Call Log - Verify whether My call log page loads on clicking in the menu", true);
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription, "Services-> My Services -> My Call Log");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.MyServices, "My Services");
			vc.getWebDriverUtils().clickElement(we_MyCallLogPage.myCallLogMenu, "My Call Log");
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(we_MyCallLogPage.myCallLogHeader,
					"Check for my call log header availability"));

			Reporter.log("109603 My Call Log - Verify the default My Call History Report", true);
			Assert.assertTrue(vc.waitUntilTextIsPresent("Call Date/Time"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Direction"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Phone Number"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Name"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Answered By"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Duration"));

			Reporter.log(
					"109692 My Call Log - Export to excel - Verify the excel is exported for My Call History Report",
					true);
			Assert.assertTrue(vc.waitUntilTextIsPresent("Export"));
			vc.getWebDriverUtils().clickElement(we_MyCallLogPage.exportMyCallLog, "Export");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Export to Excel"));

			Reporter.log("109690 My Call Log - Filters- Verify the apply filters functionality", true);
			vc.getWebDriverUtils().clickElement(we_MyCallLogPage.toggleFilters, "Click filters");
			vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_MyCallLogPage.ddlDirection, "DDL Direction",
					"Outbound");
			vc.getWebDriverUtils().clickElement(we_MyCallLogPage.myCallHistoryApplyFilter, "Click apply filters");
			Assert.assertTrue(
					vc.getWebDriverUtils().getText(we_MyCallLogPage.gridDirection1, "Direction").contains("Outbound"));
			Assert.assertTrue(
					vc.getWebDriverUtils().getText(we_MyCallLogPage.gridDirection2, "Direction").contains("Outbound"));
			vc.getWebDriverUtils().clickElement(we_MyCallLogPage.gridDirectionHeader, "Click direction header");
			Assert.assertTrue(
					vc.getWebDriverUtils().getText(we_MyCallLogPage.gridDirection1, "Direction").contains("Outbound"));
			Assert.assertTrue(
					vc.getWebDriverUtils().getText(we_MyCallLogPage.gridDirection1, "Direction").contains("Outbound"));
			vc.getWebDriverUtils().clickElement(we_MyCallLogPage.MyCallHistoryClearFilter, "Click clear filters");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Outbound"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Inbound"));

			Reporter.log("109694 My Call Log - Pagination -Verify the pagination by clicking forward page number",
					true);
			we_MyCallLogPage.verifyPagination();
			driver.navigate().refresh();
			we_MyCallLogPage.verifyforward();
			we_MyCallLogPage.verifyBackward();

		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		try {
			Reporter.log("129075 My Call Log - Check whether the user able to block phone number", true);
			for (int j = 0; j < 15; j++) {
				System.out.println("Checking for phone numbers in page " + j + "");
				WebElement table = driver.findElement(By.xpath("//*[@id='MyCallHistoryGrid']/div[2]/table/tbody"));
				List<WebElement> rowcount = table.findElements(By.tagName("tr"));
				System.out.println(rowcount.size());
				for (int i = 1; i < rowcount.size(); i++) {
					String phonenumber = driver
							.findElement(
									By.xpath("//*[@id='MyCallHistoryGrid']/div[2]/table/tbody/tr[" + i + "]/td[4]"))
							.getText();
					System.out.println("Phone number is" + phonenumber);
					int phnumber = String.valueOf(phonenumber).length();
					System.out.println("Length of the phone number " + phnumber + " is" + phnumber);
					if (phnumber >= 10) {
						String classname = driver
								.findElement(
										By.xpath("//span[contains(.,'" + phonenumber + "')]/following-sibling::button"))
								.getAttribute("class");
						System.out.println(classname);
						if (classname.equalsIgnoreCase("icon light blockphno delete")) {
							driver.findElement(
									By.xpath("//span[contains(.,'" + phonenumber + "')]/following-sibling::button"))
									.click();
							Assert.assertTrue(vc.waitUntilTextIsPresent("Confirmation"));
							Assert.assertTrue(vc.waitUntilTextIsPresent("Are you sure you want to block this record?"));
							vc.getWebDriverUtils().clickElement(we_MyCallLogPage.yesButton,
									"Click yes in confirmation pop-up icon");
							Assert.assertTrue(vc.waitUntilTextIsPresent("Successfully blocked"));

							Reporter.log(
									"129077 Manage My Blocked Numbers - Verify whether the page loads properly on clicking in the menu",
									true);
							vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
									"Services-> My Services -> Manage My Blocked Numbers");
							vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
							vc.getWebDriverUtils().clickElement(we_ServicesPage.MyServices, "My Services");
							vc.getWebDriverUtils().clickElement(we_MyCallLogPage.ManageMyBlockedNumbers,
									"Manage My Blocked Numbers");
							Assert.assertTrue(vc.waitUntilTextIsPresent("Manage Blocked Numbers"));
							Assert.assertTrue(vc.waitUntilTextIsPresent("Blocked Number"));
							String dottedphonenumber = phonenumber.substring(0, 3) + "." + phonenumber.substring(3, 6)
									+ "." + phonenumber.substring(6, 10);

							Reporter.log(
									"129076 Manage My Blocked Numbers - Check whether the blocked phone numbers available in the grid",
									true);
							Assert.assertTrue(vc.waitUntilTextIsPresent(dottedphonenumber));
							vc.getWebDriverUtils().clickElement(we_MyCallLogPage.toggleFilters, "Click filters");
							Assert.assertTrue(vc.waitUntilTextIsPresent("Enter Phone Number"));
							vc.getWebDriverUtils().enterText(we_MyCallLogPage.txtBlockedNumber, phonenumber,
									"Enter blocked phone number");

							Reporter.log("130640 Manage My Blocked Numbers - Verify the clear filters functionality",
									true);
							vc.getWebDriverUtils().clickElement(we_MyCallLogPage.blockClearFilter,
									"Click clear filters");
							Assert.assertTrue(
									vc.getWebDriverUtils()
											.getText(we_MyCallLogPage.txtBlockedNumber,
													"Get text from phone number field after clear filters")
											.contains(""));
							vc.getWebDriverUtils().enterText(we_MyCallLogPage.txtBlockedNumber, phonenumber,
									"Enter blocked phone number");

							Reporter.log("130639 Manage My Blocked Numbers - Verify the apply filters functionality",
									true);
							vc.getWebDriverUtils().clickElement(we_MyCallLogPage.blockApplyFilter,
									"Click apply filters");
							Assert.assertTrue(vc.getWebDriverUtils()
									.getText(we_MyCallLogPage.blockedFirstNumber, "Get blocked phone number")
									.contains(dottedphonenumber));

							// TODO Unblock phone number not working eventhough observing success pop-up
							// Bug-130645
							Reporter.log(
									"130638 Manage My Blocked Numbers - Verify whether user able to unblock the blocked number",
									true);
							vc.getWebDriverUtils().clickElement(we_MyCallLogPage.unblockBlockedPhoneNumber,
									"Click unblock button");
							Assert.assertTrue(vc.waitUntilTextIsPresent("Confirmation"));
							Assert.assertTrue(
									vc.waitUntilTextIsPresent("Are you sure you want to Unblock this number?"));
							vc.getWebDriverUtils().clickElement(we_MyCallLogPage.noButton,
									"Click no in the confirmation pop-up");
							Assert.assertTrue(vc.waitUntilTextIsPresent("Manage Blocked Numbers"));
							vc.getWebDriverUtils().clickElement(we_MyCallLogPage.unblockBlockedPhoneNumber,
									"Click unblock button");
							Assert.assertTrue(
									vc.waitUntilTextIsPresent("Are you sure you want to Unblock this number?"));
							vc.getWebDriverUtils().clickElement(we_MyCallLogPage.yesButton,
									"Click yes in the confirmation pop-up");
							Assert.assertTrue(vc.waitUntilTextIsPresent("Successfully Unblocked"));
							Assert.assertFalse(vc.waitUntilTextIsPresent(dottedphonenumber));
							vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
							vc.getWebDriverUtils().clickElement(we_ServicesPage.MyServices, "My Services");
							vc.getWebDriverUtils().clickElement(we_MyCallLogPage.myCallLogMenu, "My Call Log");
							vc.getWebDriverUtils().clickElement(we_MyCallLogPage.toggleFilters, "Click filters");
							vc.getWebDriverUtils().enterText(we_MyCallLogPage.txtBlockedNumber, phonenumber,
									"Enter blocked phone number");
							vc.getWebDriverUtils().clickElement(we_MyCallLogPage.myCallHistoryApplyFilter,
									"Click apply filters");
							Assert.assertTrue(vc.waitUntilTextIsPresent(phonenumber));
							String classname1 = driver
									.findElement(By.xpath(
											"//span[contains(.,'" + phonenumber + "')]/following-sibling::button"))
									.getAttribute("class");
							Assert.assertEquals(classname1, "icon light blockphno delete");
							break;
						}
					}
				}
				vc.getWebDriverUtils().clickElement(we_MyCallLogPage.paginationForwardArrow,
						"Click forward arrow in pagination");
			}
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
	}

	@Test
	public void Services_Tools_E911Location_ELNK() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.ELNK_User);
		userStoryDescription = "Services-> Tools -> E911";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			Reporter.log("11876 Verify E911Location", true);
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
					"Services-> Tools -> VoiceLineAdmin -> E911 Location");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.tools, "Tools");
			vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.setE911Location, "setE911Location");
			// Assert.assertTrue(vc.waitUntilTextIsPresent("Voice Admin / Line Admin"));

			Assert.assertTrue(vc.waitUntilTextIsPresent("Set E911 Location"));
			Assert.assertTrue(vc
					.waitUntilTextIsPresent("Configure the Emergency Response Locations for your telephone numbers."));
			vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.E911Number, "E911Number");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Address"));
			vc.getWebDriverUtils().getText(we_VoiceLineAdminPage.E911NumberAddress, "E911Number");
			Assert.assertTrue(
					vc.getWebDriverUtils().elementAvailablity(we_VoiceLineAdminPage.E911Delete, "E911 Delete"));
			Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(we_VoiceLineAdminPage.E911New, "E911New"));
			Assert.assertTrue(
					vc.getWebDriverUtils().elementAvailablity(we_VoiceLineAdminPage.E911MakeActive, "E911MakeActive"));
			// vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.E911MakeActive,
			// "MakeActive");

			vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.E911Close, " Close");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Select Number"));

		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		Reporter.log(testMethodName + " ==> " + "Test case passed", true);

	}

	@Test
	public void Services_Tools_VoiceLineAdmin_ELNK() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.ELNK_User);
		userStoryDescription = "Services-> Tools -> VoiceLineAdmin";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			try {
				Reporter.log("11876 Verify Voice Line Admin", true);
				vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
						"Services-> Tools -> VoiceLineAdmin -> Line Admin");
				vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
				vc.getWebDriverUtils().clickHiddenElement(we_VoiceLineAdminPage.tools, "Tools");
				vc.getWebDriverUtils().clickHiddenElement(we_VoiceLineAdminPage.voiceLineAdmin, "VoiceLineAdmin");
				// Assert.assertTrue(vc.waitUntilTextIsPresent("Voice Admin / Line Admin"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.lineAdmin, "LineAdmin");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Line Administration"));
				// vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.lineAdminPhoneNumber,
				// "LineAdmin");
				vc.getWebDriverUtils().genericDropDownSelectFirstItem(we_VoiceLineAdminPage.lineAdminPhoneNumber,
						"phoneNumber");

				// vc.getWebDriverUtils().selectByIndexValue(we_VoiceLineAdminPage.lineAdminUsers,
				// 0, "Users");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.voiceLineAdmin, username, "Username");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.lineAdminSaveButton, "Save Button");
				Assert.assertTrue(vc.waitUntilTextIsPresent("You have successfully saved the line alias!"));

				successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
			} catch (Throwable e) {
				e.printStackTrace();
				failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
			}

			try {
				Reporter.log("11876 Verify RequestHistory", true);
				vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
						"Services-> Tools -> VoiceLineAdmin -> Request History");
				vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.tools, "Tools");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.voiceLineAdmin, "VoiceLineAdmin");
				// Assert.assertTrue(vc.waitUntilTextIsPresent("Voice Admin / Line Admin"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.requestHistory, "Request History");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Request History"));

				Assert.assertTrue(vc.waitUntilTextIsPresent("Date"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Ticket #"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Request Type"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Requested By"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Status"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.requestHistoryDetails,
						"requestHistoryDetails");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Phone Number"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Feature Package"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Call Block"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Call Transfer Mode"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("No Answer Call Forwarding Ring Number"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Speed Calling Mode"));

				successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
			} catch (Throwable e) {
				e.printStackTrace();
				failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
			}
			try {
				Reporter.log("11876 Verify ChangeHistory", true);
				vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
						"Services-> Tools -> VoiceLineAdmin -> Change History");
				vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.tools, "Tools");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.voiceLineAdmin, "VoiceLineAdmin");
				// Assert.assertTrue(vc.waitUntilTextIsPresent("Voice Admin / Line Admin"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.changeHistory, "Change History");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Change History"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Summary"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.changeHistoryFilters, "Filters");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Change Date"));
				Assert.assertTrue(vc.getWebDriverUtils()
						.elementAvailablity(we_VoiceLineAdminPage.changeHistoryApplyFilters, "Check for ApplyFilters"));
				Assert.assertTrue(vc.getWebDriverUtils()
						.elementAvailablity(we_VoiceLineAdminPage.changeHistoryClearFilters, "Check for ClearFilters"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.changeHistoryFilters, "Filters");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.changeHistoryExport, "Export");
				Assert.assertTrue(vc.getWebDriverUtils()
						.elementAvailablity(we_VoiceLineAdminPage.changeHistoryExportToExcel, "ExportToExcel"));
				Assert.assertTrue(vc.getWebDriverUtils()
						.elementAvailablity(we_VoiceLineAdminPage.changeHistoryExportToPdf, "ExportToPdf"));

				successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
			} catch (Throwable e) {
				e.printStackTrace();
				failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
			}
			try {
				Reporter.log("11876 Verify E911Location", true);
				vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
						"Services-> Tools -> VoiceLineAdmin -> E911 Location");
				vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.tools, "Tools");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.voiceLineAdmin, "VoiceLineAdmin");
				// Assert.assertTrue(vc.waitUntilTextIsPresent("Voice Admin / Line Admin"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.E911Location, "E911 Location");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Set E911 Location"));
				Assert.assertTrue(vc.waitUntilTextIsPresent(
						"Configure the Emergency Response Locations for your telephone numbers."));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.E911Number, "E911Number");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Address"));
				vc.getWebDriverUtils().getText(we_VoiceLineAdminPage.E911NumberAddress, "E911Number");
				Assert.assertTrue(
						vc.getWebDriverUtils().elementAvailablity(we_VoiceLineAdminPage.E911Delete, "E911 Delete"));
				Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(we_VoiceLineAdminPage.E911New, "E911New"));
				Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(we_VoiceLineAdminPage.E911MakeActive,
						"E911MakeActive"));
				// vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.E911MakeActive,
				// "MakeActive");

				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.E911Close, " Close");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Select Number"));

				successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
			} catch (Throwable e) {
				e.printStackTrace();
				failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
			}
			try {
				Reporter.log("11876 Verify Line Features", true);
				vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
						"Services-> Tools -> VoiceLineAdmin -> Line Features");
				vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.tools, "Tools");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.voiceLineAdmin, "VoiceLineAdmin");
				// Assert.assertTrue(vc.waitUntilTextIsPresent("Voice Admin / Line Admin"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.lineFeatures, "Line Features");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Line Feature Management"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Search phone number"));

				successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
			} catch (Throwable e) {
				e.printStackTrace();
				failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
			}
			try {
				Reporter.log("11876 Verify Account codes", true);
				vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
						"Services-> Tools -> VoiceLineAdmin -> Account Codes");
				vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.tools, "Tools");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.voiceLineAdmin, "VoiceLineAdmin");
				// Assert.assertTrue(vc.waitUntilTextIsPresent("Voice Admin / Line Admin"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodes, "Account Codes");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Using Account Codes"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Select the Billing Account for this request"));
				vc.getWebDriverUtils().genericDropDownSelectFirstItem(we_VoiceLineAdminPage.accountCodesDropDown,
						"SelectBillingAccount");
				vc.getWebDriverUtils().elementAvailablity(we_VoiceLineAdminPage.accountCodesAddNewRadio,
						"account codesAdd new radio");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Add a New Account Code"));

				// vc.getWebDriverUtils().checkPageIsReady();
				vc.getWebDriverUtils().selectRadioButton(we_VoiceLineAdminPage.accountCodesAddNewRadio,
						"Add New Account Codes");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.verifiedCode, "verified code");
				vc.getWebDriverUtils().mouseHoveronElement(we_VoiceLineAdminPage.accountCodesNameToolTip);
				// vc.getWebDriverUtils().validateToolTipTextFromPageSource(we_VoiceLineAdminPage.accountCodesNameToolTip,
				// "accountCodesNameToolTip", "");
				vc.getWebDriverUtils().mouseHoveronElement(we_VoiceLineAdminPage.accountCodesTypeToolTip);
				vc.scrollToView(we_VoiceLineAdminPage.accountCodesSubmit);
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodesSubmit, "Submit");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter a new Account Code."));
				Assert.assertTrue(
						vc.waitUntilTextIsPresent("Please select at least one phone number for this Account Code."));

				int a = 0 + (int) (Math.random() * ((9999 - 0) + 1));
				String number = String.valueOf(a);
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.newAccountCode, number, "New AccountCode");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.newAccountCodeName, "test", "Name");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodeAddAll, "Add All");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodeRemoveAll, "Remove All");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodesAvailableNumbers,
						"Available numbers");
				vc.scrollToView(we_VoiceLineAdminPage.accountCodesSubmit);
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodesSubmit, "Submit");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter a contact name."));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter a contact email."));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter a contact phone."));
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.accountCodesPrimaryContactEmail,
						"test@windstream.com", "Email");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.accountCodesPrimaryContactPhone, "5555554534",
						"Phone");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.accountCodesPrimaryContactName, username,
						"Name");
				vc.getWebDriverUtils().selectRadioButton(we_VoiceLineAdminPage.accountCodesPreferedContactEmail,
						"Email");
				vc.scrollToView(we_VoiceLineAdminPage.accountCodesSubmit);
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodesSubmit, "Submit");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Are you sure you want to add this Account Code?"));
				Assert.assertTrue(vc.waitUntilTextIsPresent(number));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodesYes, "Yes");

				successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
			} catch (Throwable e) {
				e.printStackTrace();
				failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
			}
			try {
				Reporter.log("11876 Verify Hunt Groups", true);
				vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
						"Services-> Tools -> VoiceLineAdmin -> Hunt Groups");
				vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.tools, "Tools");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.voiceLineAdmin, "VoiceLineAdmin");
				// Assert.assertTrue(vc.waitUntilTextIsPresent("Voice Admin / Line Admin"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.huntGroups, "Hunt Groups");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Using Account Codes"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Select the Billing Account for this request"));
				vc.getWebDriverUtils().genericDropDownSelectFirstItem(we_VoiceLineAdminPage.accountCodesDropDown,
						"SelectBillingAccount");
				vc.getWebDriverUtils().elementAvailablity(we_VoiceLineAdminPage.addNewHuntGroupsRadioButton,
						"Add New Hunt Groups");

				Assert.assertTrue(vc.waitUntilTextIsPresent("Would you like to"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Add a New Hunt Group"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Change an existing Hunt Group"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Delete a Hunt Group"));
				// vc.getWebDriverUtils().checkPageIsReady();
				vc.getWebDriverUtils().selectRadioButton(we_VoiceLineAdminPage.addNewHuntGroupsRadioButton,
						"Add New Hunt Groups");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Begin, please select the Hunt Group Type:"));
				vc.getWebDriverUtils().mouseHoveronElement(we_VoiceLineAdminPage.huntGroupsTypeToolTip);
				// vc.getWebDriverUtils().validateToolTipTextFromPageSource(we_VoiceLineAdminPage.accountCodesNameToolTip,
				// "accountCodesNameToolTip", "");
				vc.getWebDriverUtils().selectRadioButton(we_VoiceLineAdminPage.huntGroupsTypeCircular, "Type Circular");
				Assert.assertTrue(vc.waitUntilTextIsPresent(
						"Single clicking an entry will move it from left to right and right to left"));
				vc.scrollToView(we_VoiceLineAdminPage.accountCodesSubmit);
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodesSubmit, "Submit");

				Assert.assertTrue(vc.waitUntilTextIsPresent("A Hunt Group must have at least two (2) Phone Numbers"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter a contact name."));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter a contact email."));

				int a = 0 + (int) (Math.random() * ((9999 - 0) + 1));
				String number = String.valueOf(a);
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.newAccountCode, number, "New AccountCode");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.newAccountCodeName, "test", "Name");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodeAddAll, "Add All");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodeRemoveAll, "Remove All");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodesAvailableNumbers,
						"Available numbers");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodesAvailableNumbersSecond,
						"Available numbers Second");

				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.accountCodesPrimaryContactEmail,
						"test@windstream.com", "Email");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.accountCodesPrimaryContactPhone, "5555554534",
						"Phone");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.accountCodesPrimaryContactName, username,
						"Name");
				vc.getWebDriverUtils().selectRadioButton(we_VoiceLineAdminPage.accountCodesPreferedContactEmail,
						"Email");
				vc.scrollToView(we_VoiceLineAdminPage.accountCodesSubmit);
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodesSubmit, "Submit");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Are you sure you want to request this new Hunt Group?"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Add Hunt Group"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.huntGroupsYes, "Yes");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Your request has been submitted."));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.huntGroupsClose, "Close");

				successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
			} catch (Throwable e) {
				e.printStackTrace();
				failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
			}

			try {
				Reporter.log("11876 Verify addling Lines", true);
				vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
						"Services-> Tools -> VoiceLineAdmin -> Adding Lines");
				vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.tools, "Tools");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.voiceLineAdmin, "VoiceLineAdmin");
				// Assert.assertTrue(vc.waitUntilTextIsPresent("Voice Admin / Line Admin"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.addingLines, "Adding Lines");
				Assert.assertTrue(vc.waitUntilTextIsPresent("This request is for"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Select the Billing Account for this request"));
				vc.getWebDriverUtils().genericDropDownSelectFirstItem(we_VoiceLineAdminPage.addingLinesSelectAccount,
						"SelectBillingAccount");
				vc.getWebDriverUtils().elementAvailablity(we_VoiceLineAdminPage.addNewHuntGroupsRadioButton,
						"Adding new lines");

				Assert.assertTrue(vc.waitUntilTextIsPresent("Adding New Line(s)"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Porting Line(s) from another Carrier"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.addNewHuntGroupsRadioButton,
						"Adding new lines");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.address1, "616 courtneyway", "address1");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.city, "Mount laurel", "City");
				vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_VoiceLineAdminPage.stateCode, "NJ",
						"State code");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.postalCode, "08054", "PostalCode");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.addingLinesModem, "Modem");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.addingLinesCallingWaiting, "callwaiting");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.addingLinesCallForward, "callForward");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.addingLinesCallingforwardNumber, "5555676545",
						"callForward");
				// vc.getWebDriverUtils().validateToolTipTextFromPageSource(we_VoiceLineAdminPage.accountCodesNameToolTip,
				// "accountCodesNameToolTip", "");
				vc.scrollToView(we_VoiceLineAdminPage.addingLinesSubmit);

				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.addingLinesSubmit, "Submit");

				Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter a contact name."));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter a contact email."));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter a contact phone."));

				/*
				 * int a= 0 + (int)(Math.random() * ((9999 - 0) + 1)); String number=
				 * String.valueOf(a);
				 */

				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.accountCodesPrimaryContactEmail,
						"test@windstream.com", "Email");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.accountCodesPrimaryContactPhone, "5555554534",
						"Phone");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.accountCodesPrimaryContactName, username,
						"Name");
				vc.getWebDriverUtils().selectRadioButton(we_VoiceLineAdminPage.accountCodesPreferedContactEmail,
						"Email");
				vc.scrollToView(we_VoiceLineAdminPage.addingLinesSubmit);
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.addingLinesSubmit, "Submit");
				Assert.assertTrue(vc.waitUntilTextIsPresent("You have requested to add"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Add New Lines"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.addNewLinesYes, "Yes");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Your request has been submitted."));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.huntGroupsClose, "Close");

				successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
			} catch (Throwable e) {
				e.printStackTrace();
				failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
			}

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
		vc.getWebDriverUtils().displayExecutionResults(successMsgDesc, failMsgDesc);
	}

	@Test
	public void Services_Tools_VoiceLineAdmin_WOL() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.WOL_User);
		userStoryDescription = "Services-> Tools -> VoiceLineAdmin";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			try {
				Reporter.log("11876 Verify Voice Line Admin", true);
				vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
						"Services-> Tools -> VoiceLineAdmin -> Line Admin");
				vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.tools, "Tools");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.voiceLineAdmin, "VoiceLineAdmin");
				// Assert.assertTrue(vc.waitUntilTextIsPresent("Voice Admin / Line Admin"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.lineAdmin, "LineAdmin");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Line Administration"));
				// vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.lineAdminPhoneNumber,
				// "LineAdmin");
				vc.getWebDriverUtils().genericDropDownSelectFirstItem(we_VoiceLineAdminPage.lineAdminPhoneNumber,
						"phoneNumber");

				// vc.getWebDriverUtils().selectByIndexValue(we_VoiceLineAdminPage.lineAdminUsers,
				// 0, "Users");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.voiceLineAdmin, username, "Username");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.lineAdminSaveButton, "Save Button");
				Assert.assertTrue(vc.waitUntilTextIsPresent("You have successfully saved the line alias!"));

				successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
			} catch (Throwable e) {
				e.printStackTrace();
				failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
			}

			try {
				Reporter.log("11876 Verify RequestHistory", true);
				vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
						"Services-> Tools -> VoiceLineAdmin -> Request History");
				vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.tools, "Tools");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.voiceLineAdmin, "VoiceLineAdmin");
				// Assert.assertTrue(vc.waitUntilTextIsPresent("Voice Admin / Line Admin"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.requestHistory, "Request History");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Request History"));

				Assert.assertTrue(vc.waitUntilTextIsPresent("Date"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Ticket #"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Request Type"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Requested By"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Status"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.requestHistoryDetails,
						"requestHistoryDetails");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Phone Number"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Feature Package"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Call Block"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Call Transfer Mode"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("No Answer Call Forwarding Ring Number"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Speed Calling Mode"));

				successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
			} catch (Throwable e) {
				e.printStackTrace();
				failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
			}
			try {
				Reporter.log("11876 Verify ChangeHistory", true);
				vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
						"Services-> Tools -> VoiceLineAdmin -> Change History");
				vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.tools, "Tools");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.voiceLineAdmin, "VoiceLineAdmin");
				// Assert.assertTrue(vc.waitUntilTextIsPresent("Voice Admin / Line Admin"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.changeHistory, "Change History");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Change History"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Summary"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.changeHistoryFilters, "Filters");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Change Date"));
				Assert.assertTrue(vc.getWebDriverUtils()
						.elementAvailablity(we_VoiceLineAdminPage.changeHistoryApplyFilters, "Check for ApplyFilters"));
				Assert.assertTrue(vc.getWebDriverUtils()
						.elementAvailablity(we_VoiceLineAdminPage.changeHistoryClearFilters, "Check for ClearFilters"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.changeHistoryFilters, "Filters");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.changeHistoryExport, "Export");
				Assert.assertTrue(vc.getWebDriverUtils()
						.elementAvailablity(we_VoiceLineAdminPage.changeHistoryExportToExcel, "ExportToExcel"));
				Assert.assertTrue(vc.getWebDriverUtils()
						.elementAvailablity(we_VoiceLineAdminPage.changeHistoryExportToPdf, "ExportToPdf"));

				successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
			} catch (Throwable e) {
				e.printStackTrace();
				failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
			}
			try {
				Reporter.log("11876 Verify E911Location", true);
				vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
						"Services-> Tools -> VoiceLineAdmin -> E911 Location");
				vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.tools, "Tools");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.voiceLineAdmin, "VoiceLineAdmin");
				// Assert.assertTrue(vc.waitUntilTextIsPresent("Voice Admin / Line Admin"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.E911Location, "E911 Location");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Set E911 Location"));
				Assert.assertTrue(vc.waitUntilTextIsPresent(
						"Configure the Emergency Response Locations for your telephone numbers."));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.E911Number, "E911Number");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Address"));
				vc.getWebDriverUtils().getText(we_VoiceLineAdminPage.E911NumberAddress, "E911Number");
				Assert.assertTrue(
						vc.getWebDriverUtils().elementAvailablity(we_VoiceLineAdminPage.E911Delete, "E911 Delete"));
				Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(we_VoiceLineAdminPage.E911New, "E911New"));
				Assert.assertTrue(vc.getWebDriverUtils().elementAvailablity(we_VoiceLineAdminPage.E911MakeActive,
						"E911MakeActive"));
				// vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.E911MakeActive,
				// "MakeActive");

				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.E911Close, " Close");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Select Number"));

				successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
			} catch (Throwable e) {
				e.printStackTrace();
				failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
			}
			try {
				Reporter.log("11876 Verify Line Features", true);
				vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
						"Services-> Tools -> VoiceLineAdmin -> Line Features");
				vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.tools, "Tools");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.voiceLineAdmin, "VoiceLineAdmin");
				// Assert.assertTrue(vc.waitUntilTextIsPresent("Voice Admin / Line Admin"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.lineFeatures, "Line Features");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Line Feature Management"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Search phone number"));

				successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
			} catch (Throwable e) {
				e.printStackTrace();
				failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
			}
			try {
				Reporter.log("11876 Verify Account codes", true);
				vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
						"Services-> Tools -> VoiceLineAdmin -> Account Codes");
				vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.tools, "Tools");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.voiceLineAdmin, "VoiceLineAdmin");
				// Assert.assertTrue(vc.waitUntilTextIsPresent("Voice Admin / Line Admin"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodes, "Account Codes");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Using Account Codes"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Select the Billing Account for this request"));
				vc.getWebDriverUtils().genericDropDownSelectFirstItem(we_VoiceLineAdminPage.accountCodesDropDown,
						"SelectBillingAccount");
				vc.getWebDriverUtils().elementAvailablity(we_VoiceLineAdminPage.accountCodesAddNewRadio,
						"account codesAdd new radio");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Add a New Account Code"));

				// vc.getWebDriverUtils().checkPageIsReady();
				vc.getWebDriverUtils().selectRadioButton(we_VoiceLineAdminPage.accountCodesAddNewRadio,
						"Add New Account Codes");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.verifiedCode, "verified code");
				vc.getWebDriverUtils().mouseHoveronElement(we_VoiceLineAdminPage.accountCodesNameToolTip);
				// vc.getWebDriverUtils().validateToolTipTextFromPageSource(we_VoiceLineAdminPage.accountCodesNameToolTip,
				// "accountCodesNameToolTip", "");
				vc.getWebDriverUtils().mouseHoveronElement(we_VoiceLineAdminPage.accountCodesTypeToolTip);
				vc.scrollToView(we_VoiceLineAdminPage.accountCodesSubmit);
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodesSubmit, "Submit");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter a new Account Code."));
				Assert.assertTrue(
						vc.waitUntilTextIsPresent("Please select at least one phone number for this Account Code."));

				int a = 0 + (int) (Math.random() * ((9999 - 0) + 1));
				String number = String.valueOf(a);
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.newAccountCode, number, "New AccountCode");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.newAccountCodeName, "test", "Name");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodeAddAll, "Add All");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodeRemoveAll, "Remove All");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodesAvailableNumbers,
						"Available numbers");
				vc.scrollToView(we_VoiceLineAdminPage.accountCodesSubmit);
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodesSubmit, "Submit");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter a contact name."));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter a contact email."));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter a contact phone."));
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.accountCodesPrimaryContactEmail,
						"test@windstream.com", "Email");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.accountCodesPrimaryContactPhone, "5555554534",
						"Phone");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.accountCodesPrimaryContactName, username,
						"Name");
				vc.getWebDriverUtils().selectRadioButton(we_VoiceLineAdminPage.accountCodesPreferedContactEmail,
						"Email");
				vc.scrollToView(we_VoiceLineAdminPage.accountCodesSubmit);
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodesSubmit, "Submit");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Are you sure you want to add this Account Code?"));
				Assert.assertTrue(vc.waitUntilTextIsPresent(number));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodesYes, "Yes");

				successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
			} catch (Throwable e) {
				e.printStackTrace();
				failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
			}
			try {
				Reporter.log("11876 Verify Hunt Groups", true);
				vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
						"Services-> Tools -> VoiceLineAdmin -> Hunt Groups");
				vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.tools, "Tools");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.voiceLineAdmin, "VoiceLineAdmin");
				// Assert.assertTrue(vc.waitUntilTextIsPresent("Voice Admin / Line Admin"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.huntGroups, "Hunt Groups");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Using Account Codes"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Select the Billing Account for this request"));
				vc.getWebDriverUtils().genericDropDownSelectFirstItem(we_VoiceLineAdminPage.accountCodesDropDown,
						"SelectBillingAccount");
				vc.getWebDriverUtils().elementAvailablity(we_VoiceLineAdminPage.addNewHuntGroupsRadioButton,
						"Add New Hunt Groups");

				Assert.assertTrue(vc.waitUntilTextIsPresent("Would you like to"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Add a New Hunt Group"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Change an existing Hunt Group"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Delete a Hunt Group"));
				// vc.getWebDriverUtils().checkPageIsReady();
				vc.getWebDriverUtils().selectRadioButton(we_VoiceLineAdminPage.addNewHuntGroupsRadioButton,
						"Add New Hunt Groups");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Begin, please select the Hunt Group Type:"));
				vc.getWebDriverUtils().mouseHoveronElement(we_VoiceLineAdminPage.huntGroupsTypeToolTip);
				// vc.getWebDriverUtils().validateToolTipTextFromPageSource(we_VoiceLineAdminPage.accountCodesNameToolTip,
				// "accountCodesNameToolTip", "");
				vc.getWebDriverUtils().selectRadioButton(we_VoiceLineAdminPage.huntGroupsTypeCircular, "Type Circular");
				Assert.assertTrue(vc.waitUntilTextIsPresent(
						"Single clicking an entry will move it from left to right and right to left"));
				vc.scrollToView(we_VoiceLineAdminPage.accountCodesSubmit);
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodesSubmit, "Submit");

				Assert.assertTrue(vc.waitUntilTextIsPresent("A Hunt Group must have at least two (2) Phone Numbers"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter a contact name."));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter a contact email."));

				int a = 0 + (int) (Math.random() * ((9999 - 0) + 1));
				String number = String.valueOf(a);
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.newAccountCode, number, "New AccountCode");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.newAccountCodeName, "test", "Name");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodeAddAll, "Add All");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodeRemoveAll, "Remove All");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodesAvailableNumbers,
						"Available numbers");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodesAvailableNumbersSecond,
						"Available numbers Second");

				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.accountCodesPrimaryContactEmail,
						"test@windstream.com", "Email");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.accountCodesPrimaryContactPhone, "5555554534",
						"Phone");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.accountCodesPrimaryContactName, username,
						"Name");
				vc.getWebDriverUtils().selectRadioButton(we_VoiceLineAdminPage.accountCodesPreferedContactEmail,
						"Email");
				vc.scrollToView(we_VoiceLineAdminPage.accountCodesSubmit);
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.accountCodesSubmit, "Submit");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Are you sure you want to request this new Hunt Group?"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Add Hunt Group"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.huntGroupsYes, "Yes");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Your request has been submitted."));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.huntGroupsClose, "Close");

				successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
			} catch (Throwable e) {
				e.printStackTrace();
				failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
			}

			try {
				Reporter.log("11876 Verify addling Lines", true);
				vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
						"Services-> Tools -> VoiceLineAdmin -> Adding Lines");
				vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.tools, "Tools");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.voiceLineAdmin, "VoiceLineAdmin");
				// Assert.assertTrue(vc.waitUntilTextIsPresent("Voice Admin / Line Admin"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.addingLines, "Adding Lines");
				Assert.assertTrue(vc.waitUntilTextIsPresent("This request is for"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Select the Billing Account for this request"));
				vc.getWebDriverUtils().genericDropDownSelectFirstItem(we_VoiceLineAdminPage.addingLinesSelectAccount,
						"SelectBillingAccount");
				vc.getWebDriverUtils().elementAvailablity(we_VoiceLineAdminPage.addNewHuntGroupsRadioButton,
						"Adding new lines");

				Assert.assertTrue(vc.waitUntilTextIsPresent("Adding New Line(s)"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Porting Line(s) from another Carrier"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.addNewHuntGroupsRadioButton,
						"Adding new lines");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.address1, "616 courtneyway", "address1");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.city, "Mount laurel", "City");
				vc.getWebDriverUtils().genericDropDownSelectSpecificValue(we_VoiceLineAdminPage.stateCode, "NJ",
						"State code");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.postalCode, "08054", "PostalCode");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.addingLinesModem, "Modem");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.addingLinesCallingWaiting, "callwaiting");
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.addingLinesCallForward, "callForward");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.addingLinesCallingforwardNumber, "5555676545",
						"callForward");
				// vc.getWebDriverUtils().validateToolTipTextFromPageSource(we_VoiceLineAdminPage.accountCodesNameToolTip,
				// "accountCodesNameToolTip", "");
				vc.scrollToView(we_VoiceLineAdminPage.addingLinesSubmit);

				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.addingLinesSubmit, "Submit");

				Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter a contact name."));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter a contact email."));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Please enter a contact phone."));

				/*
				 * int a= 0 + (int)(Math.random() * ((9999 - 0) + 1)); String number=
				 * String.valueOf(a);
				 */

				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.accountCodesPrimaryContactEmail,
						"test@windstream.com", "Email");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.accountCodesPrimaryContactPhone, "5555554534",
						"Phone");
				vc.getWebDriverUtils().enterText(we_VoiceLineAdminPage.accountCodesPrimaryContactName, username,
						"Name");
				vc.getWebDriverUtils().selectRadioButton(we_VoiceLineAdminPage.accountCodesPreferedContactEmail,
						"Email");
				vc.scrollToView(we_VoiceLineAdminPage.addingLinesSubmit);
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.addingLinesSubmit, "Submit");
				Assert.assertTrue(vc.waitUntilTextIsPresent("You have requested to add"));
				Assert.assertTrue(vc.waitUntilTextIsPresent("Add New Lines"));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.addNewLinesYes, "Yes");
				Assert.assertTrue(vc.waitUntilTextIsPresent("Your request has been submitted."));
				vc.getWebDriverUtils().clickElement(we_VoiceLineAdminPage.huntGroupsClose, "Close");

				successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
			} catch (Throwable e) {
				e.printStackTrace();
				failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
			}

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
		vc.getWebDriverUtils().displayExecutionResults(successMsgDesc, failMsgDesc);
	}

	@Test
	public void Services_Voip_ManageServices_WOL() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.WOL_User);
		userStoryDescription = "Services-> products -> Voice";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			Reporter.log("126907- Voip-ManageServices", true);
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
					"Services-> products -> Voice -> Manage Services");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_VoipPage.voip, "Voip");
			// Assert.assertTrue(vc.waitUntilTextIsPresent("Voice Admin / Line Admin"));
			vc.getWebDriverUtils().clickElement(we_VoipPage.manageServices, "Manage Services");
			Assert.assertTrue(vc.waitUntilTextIsPresent("Welcome to Enhanced VOIP Interface !"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Please see below for additional  information."));
			Assert.assertTrue(vc.waitUntilTextIsPresent("User Administration Functionality"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("User Feature Controls Functionality"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Access the VoIP User Admin"));

			Assert.assertTrue(vc.waitUntilTextIsPresent("Read our detailed User Guide"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Sheduling"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Call Forward Always"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Call Forward Busy"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Call Forward No Answer"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Call Forward Not Reachable"));

			vc.getWebDriverUtils().clickElement(we_VoipPage.clickHereAccessTheVoIPUserAdmin1,
					"Click Here - Access the VoIP User Admin 1");
			vc.getWebDriverUtils().validatePageTitle("Access Management");
			Assert.assertTrue(vc.waitUntilTextIsPresent("User Name"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("First Name"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Last Name"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("User Type"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Location"));
			Assert.assertTrue(vc.waitUntilTextIsPresent("Phone Number"));
			driver.navigate().back();
			vc.getWebDriverUtils().pageRefresh();
			vc.getWebDriverUtils().validatePageTitle("Manage Services");

			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
		vc.getWebDriverUtils().displayExecutionResults(successMsgDesc, failMsgDesc);
	}

	@Test
	public void Services_Voip_DownloadUserGuides_WOL() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.WOL_User);
		userStoryDescription = "Services-> products -> Voice";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();
		try {
			Reporter.log(" 126904 Voip-Download User Guides", true);
			vc.getWebDriverUtils().logUserStoryStart(userStoryDescription,
					"Services-> products -> Voice -> DownloadUserGuides");
			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_VoipPage.voip, "Voip");
			vc.getWebDriverUtils().clickElement(we_VoipPage.downloadUserGuides, "Download User Guides");

			vc.getWebDriverUtils().validatePageTitle("Download User Guides");

			Assert.assertTrue(vc.waitUntilTextIsPresent("Faxing Over IP"));
			Assert.assertTrue(
					vc.getWebDriverUtils().elementAvailablity(we_VoipPage.downloadFaxingOverIp, "Faxing Over Ip"));
			Assert.assertTrue(vc.getWebDriverUtils()
					.getAttribute(we_VoipPage.downloadFaxingOverIp, "href", "Get Download axing Over IP - href").trim()
					.contains("/Content/pdf/faxing-over-voip.pdf"));

			Assert.assertTrue(vc.waitUntilTextIsPresent("Dynamic IP &amp; Virtual PBX User Guide"));
			Assert.assertTrue(
					vc.getWebDriverUtils().elementAvailablity(we_VoipPage.downloadDynamicIp, "DynamicIp Download"));
			Assert.assertTrue(vc.getWebDriverUtils()
					.getAttribute(we_VoipPage.downloadDynamicIp, "href",
							"Get Download Dynamic IP & Virtual PBX User Guide - href")
					.trim().contains("/Content/pdf/dynamic-ip-virtualpbx-user-guide.pdf"));

			vc.getWebDriverUtils().clickElement(we_HomePage.services, "Services");
			vc.getWebDriverUtils().clickElement(we_ServicesPage.productsSubMenu, "Products");
			vc.getWebDriverUtils().clickElement(we_VoipPage.voip, "Voip");
			vc.getWebDriverUtils().clickElement(we_VoipPage.backVoip, "Back");
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);

		} catch (Throwable e) {
			e.printStackTrace();
			Reporter.log(testMethodName + " ==> " + "Test case Failed", true);
			vc.getWebDriverUtils().takeScreenshot(testMethodName + "_error");
		}
		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
		vc.getWebDriverUtils().displayExecutionResults(successMsgDesc, failMsgDesc);
	}

	@Test
	public void Services_VoipAccessManagement_WOL() throws Throwable {
		Menu menu = MenuFactory.getModule1MenuByTitle(module1AppMenu.WOL_User);
		userStoryDescription = "Services-> products -> Voice";
		we_LoginPage.navigateTo_WEHome(menu);
		winHandleBefore = driver.getWindowHandle();

		try {
			Assert.assertTrue(false);
			// TO DO
			successMsgDesc = vc.getWebDriverUtils().logUserStoryEndSuccess(userStoryDescription, successMsgDesc);
		} catch (Throwable e) {
			e.printStackTrace();
			failMsgDesc = vc.getWebDriverUtils().logUserStoryEndFail(userStoryDescription, failMsgDesc);
		}

		Reporter.log(testMethodName + " ==> " + "Test case passed", true);
		vc.getWebDriverUtils().displayExecutionResults(successMsgDesc, failMsgDesc);
	}

}
