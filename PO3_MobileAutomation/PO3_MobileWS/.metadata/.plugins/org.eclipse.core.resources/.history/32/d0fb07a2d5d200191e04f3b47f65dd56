package com.webautomation.validation;


import java.util.List;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.NoSuchFrameException;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Reporter;

import commonUtil.MobileDriverUtils;
import commonUtil.WebDriverUtils;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.android.AndroidElement;

public class Validator {

	protected AndroidDriver<AndroidElement> driver;
	private final WebDriverUtils webDriverUtils;
	private final MobileDriverUtils mobileDriverUtils;

	public static int sleepVar500 = 500;
	public static int sleepVar2000 = 2000;
	public static int sleepVar3000 = 2000;
	public static int sleepVar5000 = 2000;

	public Validator(AndroidDriver<AndroidElement> driver) {
		this.driver = driver;
		webDriverUtils = new WebDriverUtils(driver);
		mobileDriverUtils = new MobileDriverUtils(driver);
	}

	public WebDriver getDriver() {
		return driver;
	}

	public void setDriver(WebDriver driver) {
		this.driver = driver;
	}

	/**
	 * Check to see if Page Source contains indicated String value.
	 * Case sensitive.
	 * @param validationString
	 * @return
	 */
	public boolean isValidationTextPresent(String validationString) {
		return getDriver().getPageSource().contains(validationString);
	}
	
	
	/**
	 * Check to see if Page Source contains indicated String value.
	 * Case insensitive.
	 * @param value
	 * @return
	 */
	public boolean isPageSourceTextPresentCaseInsensitive(String value) {
		return getDriver().getPageSource().toLowerCase().contains(value.toLowerCase());
	}
	
	/**
	 * Check to see if Page Title contains indicated String value.
	 * Case insensitive.
	 * @param value
	 * @return
	 */
	public boolean isTitleTextPresentCaseInsenstive(String value) {
		return getDriver().getTitle().toLowerCase().contains(value.toLowerCase());
	}
	
	/**
	 * Check to see if Page Title contains indicated String value.
	 * Case sensitive.
	 * @param value
	 * @return
	 */
	public boolean isTitleTextPresentCaseSenstive(String value) {
		return getDriver().getTitle().contains(value);
	}

	@Deprecated //use waitUtilTextIsPresent
	public boolean waitUntilValidationTextIsPresent(String validationString)
			throws InterruptedException {

		boolean isGetPageSource = false;
		int i = 0;

		if (getDriver().getTitle().toLowerCase()
				.contains(validationString.toLowerCase())) {
			isGetPageSource = true;

			System.out.println("Checking getPageSource for " + validationString
					+ " is " + isGetPageSource);
			Thread.sleep(1000);

			return isGetPageSource;

		}

		if (getDriver().getPageSource().toLowerCase().contains(validationString.toLowerCase())) {
			isGetPageSource = true;
			System.out.println("Checking getPageSource for " + validationString
					+ " is " + isGetPageSource);
			Thread.sleep(1000);

			return isGetPageSource;
		} else {

			outer: do {

				if (getDriver().getPageSource().toLowerCase().contains(validationString.toLowerCase())) {
					break outer;
				}
				Thread.sleep(1000);
				i++;
			} while (!getDriver().getPageSource().toLowerCase()
					.contains(validationString.toLowerCase())
					&& i < 3);

			// Timing only
			if (getDriver().toString().contains("ChromeDriver")) {
				Thread.sleep(1000);
				// isGetPageSource=true;
				return isGetPageSource;

			}

			return getDriver().getPageSource().toLowerCase()
					.contains(validationString.toLowerCase());

		}

	}
	
	/**
	 * Replacement for method waitUntilValidationTextIsPresent.
	 * Case insensitive.
	 * Make 12 attempts (1 Title and 11 Page Source attempts).  Wait 1 second between requests.
	 * First check Title, then check Page Source.
	 * 
	 * @param validationText
	 * @return true if the text is present, else return false.	
	 */
	public boolean waitUntilTextIsPresent(String validationText) {
		int searchFlag=0;
		int attemptCount = 1;
		int maxAttempts = 11;
		int sleepInterval = 1000;
			Reporter.log("Searching for := "+ validationText,true);	
		if (isTitleTextPresentCaseInsenstive(validationText)) {
			System.out.println("Page Title for " + validationText + " is true");
			Reporter.log("Page Title for " + validationText + " is true");
			searchFlag=1;
		} else {
				
			foundIt:
			while (attemptCount <= maxAttempts ) {
				if (isPageSourceTextPresentCaseInsensitive(validationText)) {
					Reporter.log("Page Source for " + validationText + " is true",true);
					searchFlag=1;
					break foundIt;
				} else {					
					try {
						Thread.sleep(sleepInterval);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				attemptCount++;
			}		
		}	
		if (searchFlag==0) {
			Reporter.log("Page Source for " + validationText + " is not found",true);
		}
		return (attemptCount <= maxAttempts) ? true : false;
	}

	/**
	 * @throws InterruptedException
	 */
	// This method is a second time validation - added for links that fail after
	// the first validation when run in Team City
	public boolean waitUntilValidationTextIsPresentTiming(
			String validationString) throws InterruptedException {
		int i = 0;
		boolean elementIsClickable = false;

		outer: do {
			try {

				System.out.println("Validating string " + validationString);
				elementIsClickable = isValidationTextPresent(validationString);
			} catch (Throwable e) {

			}
			i++;
			if (elementIsClickable) {

				Thread.sleep(1000);

				break outer;
			}
			Thread.sleep(2000);
		} while (!elementIsClickable && i < 3);
		return elementIsClickable;

	}

	/**
	 * Explicit wait for WebElement to be visible and clickable.
	 * 
	 * The WebDriver definition of 'clickable' is that the element is visible and enabled, it does
	 * not mean that if you click it, something happens.  For example, title text may be clickable, but 
	 * nothing is expected to happen if you click it.
	 * 
	 * Calls the expected condition every 500 milliseconds.
	 * If TimeoutException is thrown, 'false' is returned.
	 * Stops checking after 120 seconds.
	 * 
	 * @param linkElement - a WebElement reference needing to be clickable.
	 * @return boolean - 'true' if element is clickable, else return 'false'.
	 */
	public boolean clickElementEnabledCheck(WebElement linkElement) {
		return waitForElement(linkElement, 120);
	}

	/**
	 * Wait until element is available. Wait for up to the indicated timeValue.
	 * 
	 * <code>
	 * 	Assert.assertTrue(ValidationClass.waitForElement(clickOn, 300), "failed to get my element to appear");
	 * </code>
	 * 
	 * @param webElement - the element to wait for.
	 * @return true if element found, else return false.
	 */
	public boolean waitForElement(WebElement webElement, int timeValue) {
		boolean isClickable = false;
	
		System.out.println("Checking element is clickable "); 
		try {		
			WebElement myDynamicElement = (new WebDriverWait(driver, timeValue))
					.until(ExpectedConditions.elementToBeClickable(webElement));
	
			if (myDynamicElement != null && webElement.isEnabled()) {
				isClickable = true;
				System.out.println("Found element: "+webElement.getText());
			}
		} catch (TimeoutException e) {
			System.out.println("Timed out waiting for element");				
		} 
	
		return isClickable;
	}

	public boolean waitForElement(WebElement webElement) {			
		return waitForElement(webElement, 120);		
	}
	
	/**
	 * An expectation for checking that an element, known to be present on the DOM of a page, is visible. 
	 * Visibility means that the element is not only displayed but also has a height and width that is greater than 0.
	 * 
	 * @param webElement - the WebElement to wait for to be visible.
	 * @param timeValue - an int that represents the maximum time (seconds) to wait.
	 * @return boolean - 'true' if element is visible, else return false.
	 */
	public boolean waitForElementToBeVisible(WebElement webElement, int timeValue) {
		return waitForElement(webElement, timeValue);	
	}
	
	/**
	 * Find the text associated with a WebElement and compare it the expected text.
	 * Continuing trying for up to 10 seconds. 
	 * @param element - A WebElement containing the desired text.
	 * @param text - A String that represents the expected text.
	 * @return true if the WebElement is found and expected text matches the found text, else return false. 
	 */
	public boolean isTextPresent(WebElement element, String expectedText) {
		boolean isPresent = false;
		int maxAttempts = 10;
		int attempts = 0;
		
		System.out.println("Checking Page for " + expectedText);
		do {			
				String elementText = "";
				try {
					elementText = element.getText().trim();
				} catch (Exception e) {
					System.out.println("Checking Page for " + expectedText + " is false");
					break;
				}
				if (elementText.equals(expectedText)) {
					isPresent = true;
					System.out.println("Checking Page for " + expectedText + " is true");
				} else {
					if (elementText != null && elementText.length() > 0) {
						System.out.println("Checking Page for " + expectedText + " is false");
						break;
					}
					if (attempts++ < maxAttempts) {
						try {
							Thread.sleep(1000);
						} catch (InterruptedException e1) {}
					} else {
						System.out.println("Checking Page for " + expectedText + " is false");
						break;
					}
				}
				
			
		} while (isPresent == false);
		
		
		return isPresent;		
	}

	



	// This method takes a screenshot for a failed test case
	public void catchFailScreenshot(Throwable e,	String methodString) {
		// if assert fails catch block executes and takes screenshot for failed
		// page
		webDriverUtils.takeScreenshot(methodString);
		System.out.println(e.getMessage());

		Reporter.log("Failed on method:" + methodString);
		Reporter.log("Message: " + e.getLocalizedMessage());

		switchtoDefaultFrame();
		Assert.assertTrue(false);
	}

	/**
	 * @throws InterruptedException
	 */
	public void linkValidationCloseWindow(WebElement validationLink,
			String validationText) throws InterruptedException {
		waitUntilTextIsPresent(validationText);

		String winHandleBefore = driver.getWindowHandle();

		// Perform the click operation that opens new window
		System.out.println("Selecting link " + validationLink.getText());

		clickElementEnabledCheck(validationLink);
		validationLink.click();
		waitUntilTextIsPresent("Windstream");
		Thread.sleep(5000);
		for (String winHandle : driver.getWindowHandles()) {
			driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			Thread.sleep(sleepVar3000);
			driver.switchTo().window(winHandle);// Switch to new window opened
			Thread.sleep(1000);
		}
		Thread.sleep(3000);
		waitUntilTextIsPresent("Windstream");
		driver.switchTo().defaultContent();
		driver.close();
		driver.switchTo().window(winHandleBefore);
		
		Assert.assertTrue(waitUntilTextIsPresent(validationText));
	}

	/**
	 * @throws InterruptedException
	 */
	public void linkValidationClickBackWindow(WebElement validationLink)
			throws InterruptedException {
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		Thread.sleep(sleepVar500);
		System.out.println("Selecting link " + validationLink.getText());
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		Thread.sleep(sleepVar500);
		clickElementEnabledCheck(validationLink);
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		Thread.sleep(sleepVar500);
		validationLink.click();
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		Thread.sleep(sleepVar500);

	}

	public void explictId(WebElement str) {
		WebDriverWait wait = new WebDriverWait(driver, 120);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id((str)
				.toString())));

	};

	public void explictXPath(WebElement str) {
		WebDriverWait wait = new WebDriverWait(driver, 120);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath((str)
				.toString())));

	};

	// set the
	public int getRandomNumberForMonthRange(int min, int max) {

		if (min >= max) {
			throw new IllegalArgumentException("max must be greater than min");
		}

		Random r = new Random();
		return r.nextInt((max - min) + 1) + min;
	}

	public boolean accountTableValidation(WebDriver driver,
			boolean accountExists, String accountNumber) {

		System.out.println("Looking in the table for contact name - "
				+ accountNumber);
		// Read and iterate through the contacts table to validate the contact
		// has been added
		// Assert contact is created
		WebElement table_element = driver.findElement(By
				.cssSelector("#pickedAccountLB"));
		List<WebElement> tr_collections = table_element.findElements(By
				.cssSelector("#pickedAccountLB > option"));

		int i = 1;
		outer: for (WebElement trElement : tr_collections) {
			//
			List<WebElement> td_collection = trElement.findElements(By
					.xpath("//*[@id='pickedAccountLB']/option[" + i + "]"));
			// System.out.println("NUMBER OF COLUMNS="+td_collection.size());
			td_collection = trElement.findElements(By
					.xpath("//*[@id='pickedAccountLB']/option[" + i + "]"));
			for (WebElement tdElement : td_collection) {
				System.out.println("text=" + tdElement.getText());
				if (tdElement.getText().contains(accountNumber)) {
					System.out.println("text=" + tdElement.getText());

					// if contact is added and is in the list set
					accountExists = true;
					System.out.println();
					System.out.println("Found account " + accountNumber);
					Reporter.log("Found account as expected ");
					assert (tdElement.getText().contains(accountNumber));
					break outer;
				} else {
					// if account is not in the list set accountExists = false;
					accountExists = false;
				}
			}
			i++;

		}
		return accountExists;
	}

	public boolean accountTableValidationUnpicked(boolean accountExists, String accountNumber) {

		System.out.println("Looking in the table for contact name - "
				+ accountNumber);
		// Read and iterate through the contacts table to validate the contact
		// has been added
		// Assert contact is created
		WebElement table_element = driver.findElement(By
				.cssSelector("#unpickedLB"));
		List<WebElement> tr_collections = table_element.findElements(By
				.cssSelector("#unpickedLB > option"));

		int i = 1;
		outer: for (WebElement trElement : tr_collections) {
			//
			List<WebElement> td_collection = trElement.findElements(By
					.xpath("//*[@id='unpickedLB']/option[" + i + "]"));
			// System.out.println("NUMBER OF COLUMNS="+td_collection.size());
			td_collection = trElement.findElements(By
					.xpath("//*[@id='unpickedLB']/option[" + i + "]"));
			for (WebElement tdElement : td_collection) {
				System.out.println("text=" + tdElement.getText());
				if (tdElement.getText().contains(accountNumber)) {
					System.out.println("text=" + tdElement.getText());

					// if contact is added and is in the list set
					accountExists = true;
					System.out.println();
					System.out.println("Found account " + accountNumber);
					Reporter.log("Found account as expected ");
					assert (tdElement.getText().contains(accountNumber));
					break outer;
				} else {
					// if account is not in the list set accountExists = false;
					accountExists = false;
				}
			}
			i++;

		}
		return accountExists;
	}

	public void accountTableValidationClickLink(boolean accountExists, String CNumber) {

		System.out.println("Looking in the table for CNumber - " + CNumber);
		// Read and iterate through the accounts table to validate the account
		// is present
		WebElement table_element = driver
				.findElement(By
						.cssSelector("#mainpanel > div > div > div.contentContainer > div > table"));
		List<WebElement> tr_collections = table_element
				.findElements(By
						.cssSelector("#mainpanel > div > div > div.contentContainer > div > table > tbody > tr"));

		int i = 1;
		outer: for (WebElement trElement : tr_collections) {

			List<WebElement> td_collection = trElement
					.findElements(By
							.xpath("//*[@id='mainpanel']/div/div/div[2]/div/table/tbody/tr["
									+ i + "]/td/a"));

			td_collection = trElement
					.findElements(By
							.xpath("//*[@id='mainpanel']/div/div/div[2]/div/table/tbody/tr["
									+ i + "]/td/a"));
			for (WebElement tdElement : td_collection) {
				System.out.println("text=" + tdElement.getText());
				if (tdElement.getText().contains(CNumber)) {
					System.out.println("text=" + tdElement.getText());

					// if account is found and is in the list
					assert (tdElement.getText().contains(CNumber));
					System.out.println();
					System.out.println("Found account " + CNumber);
					Reporter.log("Found and clicked link as expected ");
					tdElement.click();
					break outer;
				} else {
					// if account is not in the list set accountExists = false;
					accountExists = false;
				}
			}
			i++;

		}

	}

	@FindBy(xpath = "/html/body/html:html/div[3]/div[1]/div[1]/div/div/div[1]/a[2]")
	public WebElement signOut;

	public void clickOnsignOut() throws InterruptedException {

		try {
			clickElementEnabledCheck(signOut);
			signOut.click();
		} catch (Throwable e) {

		}

	}

	public boolean clickElementEnabledCheckRefresh(WebElement linkElement)
			throws InterruptedException {
		boolean isClickable = false;

		try {
			System.out.println("Checking element is clickable "
					+ linkElement.getText());
			WebElement myDynamicElement = (new WebDriverWait(driver, 30))
					.until(ExpectedConditions.elementToBeClickable(linkElement));

			if (myDynamicElement != null && linkElement.isEnabled()) {

				isClickable = true;
			}
		} catch (Exception e) {
			driver.navigate().refresh();
		}

		return isClickable;

	}

	public void switchtoDefaultFrame() {
		try {
			driver.switchTo().defaultContent();
			System.out.println("Navigated back to webpage from frame");
		} catch (Throwable e) {
			System.out
					.println("unable to navigate back to main webpage from frame"
							+ e.getStackTrace());
		}
	}

	//TODO - the linkElement.getText() causes an exception if the element is not present, yet.
	//TODO - do we deprecate or do we change this method???
	public boolean clickElementEnabledCheck(WebElement linkElement, int tries)
			throws InterruptedException {
		boolean isClickable = false;

		outer: try {
			System.out.println("Checking element is clickable "
					+ linkElement.getText());
			WebElement myDynamicElement = (new WebDriverWait(driver, 120))
					.until(ExpectedConditions.elementToBeClickable(linkElement));

			if (myDynamicElement != null && linkElement.isEnabled()) {

				isClickable = true;
			}
			if (tries == 2) {
				break outer;
			}
			tries++;
		} catch (Exception e) {
			e.printStackTrace();
		}

		return isClickable;

	}

	/**
	 * @throws InterruptedException
	 */
	// This method is a second time validation - added for links that fail after
	// the first validation when run in Team City
	public boolean waitUntilValidationTextIsPresentTiming(
			String validationString, int tries) throws InterruptedException {
		int i = 0;
		boolean elementIsClickable = false;

		outer: do {
			try {

				System.out.println("Validating string " + validationString);
				elementIsClickable = isValidationTextPresent(validationString);
			} catch (Throwable e) {

			}
			i++;
			if (elementIsClickable) {

				Thread.sleep(1000);

				break outer;
			}
			Thread.sleep(2000);
		} while (!elementIsClickable && i < tries);

		return elementIsClickable;

	}

	public WebDriverUtils getWebDriverUtils() {
		return this.webDriverUtils;
	}
	
	public MobileDriverUtils getMobileDriverUtils() {
		return this.mobileDriverUtils;
	}
	

	/**
	 * Check for the existences of two windows (main and report).
	 * Switch to the report window.
	 * 
	 * @Ruturn String - a String object that represents the name of the main window. Or return NULL if
	 *                there 1 or more than 2 two windows were find.
	 */
	public String switchToReportWindow() {
		String mainWindow = null;
		
		if (this.waitForTwoWindows(5)) {				
			mainWindow = driver.getWindowHandle();		
			for (String window : driver.getWindowHandles()) {			
				if (!mainWindow.equals(window)) {
					// Switch to new window opened
					driver.switchTo().window(window);
				}			
			}
		}
		
		return mainWindow;
	}

	public static int getRandomNumberInRange(int min, int max) {

		if (min >= max) {
			throw new IllegalArgumentException("max must be greater than min");
		}

		Random r = new Random();
		return r.nextInt((max - min) + 1) + min;
	}


	/**
	 * Switch back to the main window by closing the report window.
	 */
	public void switchToMainWindow(String mainWindowName) {
		driver.switchTo().defaultContent();
		driver.close();		
		driver.switchTo().window(mainWindowName);
	}
	
	/**
	 * 
	 * @param howLongToWait - an int that indicates how many seconds to wait for 2 windows.
	 * @return boolean - a boolean that indicates whether or not the driver has 2 windows.
	 */
	public boolean waitForTwoWindows(int howLongToWait) {
		int attempts = 0;		
		do {			
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {				
				e.printStackTrace();
			}
			if (attempts++ > howLongToWait) {
				//give up				
				break;
			}
		} while(driver.getWindowHandles().size() == 1);
		
		return (driver.getWindowHandles().size() == 2);
	}
	
	public boolean accountTableValidationUnpicked(String accountNumber ) {
		boolean accountExists = false;
		
		System.out.println("Looking in the table for contact name - " + accountNumber);
		//Read and iterate through the contacts table to validate the contact has been added
		//Assert contact is created
		WebElement table_element = driver.findElement(By.cssSelector("#unpickedLB"));
		List<WebElement> tr_collections = table_element.findElements(By.cssSelector("#unpickedLB > option"));

		
			int i = 1;
		outer: for (WebElement trElement : tr_collections) {
			//                                                                
			List<WebElement> td_collection = trElement.findElements(By.xpath("//*[@id='unpickedLB']/option["+ i + "]"));
			// System.out.println("NUMBER OF COLUMNS="+td_collection.size());
			td_collection = trElement.findElements(By.xpath("//*[@id='unpickedLB']/option["+ i + "]"));
			for (WebElement tdElement : td_collection) {
				System.out.println("text=" + tdElement.getText()); 
				if (tdElement.getText().contains(accountNumber)) {
					System.out.println("text=" + tdElement.getText());

					// if contact is added and is in the list set
					accountExists = true;
					System.out.println();
					System.out.println("Found account " + accountNumber);
					Reporter.log("Found account as expected ");
					assert(tdElement.getText().contains(accountNumber));
					break outer;
				} else {
					// if account is not in the list set accountExists = false;
					accountExists = false;
				}
			}
			i++;

		}
		return accountExists;
	}
	
	public void scrollToView(WebElement element)
    {
           JavascriptExecutor js = (JavascriptExecutor) driver;
           js.executeScript("arguments[0].scrollIntoView(true);",element);
    }
	public void scrollUp()
	{
		JavascriptExecutor jse = (JavascriptExecutor) driver;
		   jse.executeScript("window.scrollBy(0,-700)");
	}
	
	public void scrollDown()
	{
		JavascriptExecutor jse = (JavascriptExecutor) driver;
		   jse.executeScript("window.scrollBy(0,700)");
	} 

	public void switchToFrame(String frame) throws
	 Throwable {
		 try {
			 driver.switchTo().frame(frame);
			 System.out.println("Navigated to frame with name " + frame);
		 } catch(NoSuchFrameException e) {
			 System.out.println("Unable to locate frame with id " + frame + e.getStackTrace());
		 }
	 } 
}