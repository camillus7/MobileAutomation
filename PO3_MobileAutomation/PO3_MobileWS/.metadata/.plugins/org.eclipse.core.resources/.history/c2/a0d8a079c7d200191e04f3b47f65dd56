package WebDriver;

import java.util.concurrent.TimeUnit;

import org.openqa.selenium.WebDriver;
import org.testng.Reporter;

import commonUtil.PropertiesUtil;

public final class WebDriverFactory {

	public final static String FIREFOX = "firefox";
	public final static String CHROME = "chrome";
	public final static String IE = "ie";
	public final static String GECKO = "gecko";
	public final static String ANDROID = "android";
	public final static String EDGE = "edge";
	
	public static ApplicationWebDriver getWebDriver(String browser) {

		ApplicationWebDriver applicationWebDriver = null;
		
		if(browser.contains(FIREFOX)) {
			applicationWebDriver =  new FireFoxWebDriver();
		} else  if(browser.contains(GECKO)) { 
			applicationWebDriver =  new GeckoWebDriver();
		} else  if(browser.contains(CHROME)) { 
			applicationWebDriver =  new ChromeWebDriver();
		/*} else  if(browser.contains(EDGE)) { 
			applicationWebDriver =  new EdgeWebDriver();	*/
		} else if(IE.equalsIgnoreCase(browser)) {			
			applicationWebDriver =  new InternetExplorerWebDriver();
		}else if (browser.contains(ANDROID)) {
			applicationWebDriver = new AndroidDriver();
			//androidDriver = new AndroidDriver();

		}

		return applicationWebDriver;
	}

	/**
	 * Return the appropriate WebDriver object based on configuration values found in config.properties file.
	 * 
	 * @return
	 */
	public static WebDriver getSeleniumWebDriver() {
	    return getSeleniumWebDriver(PropertiesUtil.getValue(PropertiesUtil.BROWSER_PROPERTY), PropertiesUtil.isGridPlatform(), PropertiesUtil.getGridUrl());
	}
	
	
	public static WebDriver getAndroidDriver() {
		return getandroidDriver(PropertiesUtil.getValue(PropertiesUtil.BROWSER_PROPERTY));
				
	}

	/**
	 * Return the appropriate WebDriver object based on indicated parameters.
	 * @param browser - a String representing the browser type, e.g. 'chrome', 'firefox', or 'ie'.
	 * @param isGridPlatform - a boolean that indicates whether or not driver is for the grid platform.
	 * @param gridUrl - a String that represents the grid's URL.
	 * @return WebDriver for the indicated environment and browser type.
	 */
	public static WebDriver getSeleniumWebDriver(String browser, boolean isGridPlatform, String gridUrl) {
		WebDriver driver = null;
		ApplicationWebDriver applicationWebDriver;		

		if (browser.contains(FIREFOX)) {
			applicationWebDriver = new FireFoxWebDriver();
		} else if (browser.contains(GECKO)) {
			applicationWebDriver = new GeckoWebDriver();
		} else if (browser.contains(CHROME)) {
			applicationWebDriver = new ChromeWebDriver();
		/*} else if (browser.contains(EDGE)) {
			applicationWebDriver = new EdgeWebDriver();*/
		} else if (browser.contains(ANDROID)) {
			applicationWebDriver = new AndroidDriver();
		} 
		else {
			applicationWebDriver = new InternetExplorerWebDriver();
		}

		driver = applicationWebDriver.getWebDriver(isGridPlatform, gridUrl);
		
		driver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);
		return driver;
	}
	
	
	//Added this method for Mobile
	public static WebDriver getandroidDriver(String browser) {
		WebDriver driver = null;
		ApplicationWebDriver applicationWebDriver;

		if (browser.contains(ANDROID)) {
			applicationWebDriver = new AndroidAppiumDriver();
		} 

		driver = applicationWebDriver.getWebDriver();

		try {
			Thread.sleep(5000);
		}catch(Exception e) {
			
		}
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		return driver;
	}

}
